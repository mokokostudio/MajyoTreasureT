// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.3
// source: grpc_game.proto

package mpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReqFight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BossId         uint32 `protobuf:"varint,2,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	BossUuid       uint64 `protobuf:"varint,3,opt,name=boss_uuid,json=bossUuid,proto3" json:"boss_uuid,omitempty"`
	WithBossDetail bool   `protobuf:"varint,4,opt,name=with_boss_detail,json=withBossDetail,proto3" json:"with_boss_detail,omitempty"`
}

func (x *ReqFight) Reset() {
	*x = ReqFight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFight) ProtoMessage() {}

func (x *ReqFight) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFight.ProtoReflect.Descriptor instead.
func (*ReqFight) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{0}
}

func (x *ReqFight) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqFight) GetBossId() uint32 {
	if x != nil {
		return x.BossId
	}
	return 0
}

func (x *ReqFight) GetBossUuid() uint64 {
	if x != nil {
		return x.BossUuid
	}
	return 0
}

func (x *ReqFight) GetWithBossDetail() bool {
	if x != nil {
		return x.WithBossDetail
	}
	return false
}

type ResFight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Win             bool                 `protobuf:"varint,1,opt,name=win,proto3" json:"win,omitempty"`
	BossDie         bool                 `protobuf:"varint,2,opt,name=boss_die,json=bossDie,proto3" json:"boss_die,omitempty"`
	Details         []*FightDetail       `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	Awards          *CAwards             `protobuf:"bytes,4,opt,name=awards,proto3" json:"awards,omitempty"`
	EnergyCost      uint32               `protobuf:"varint,5,opt,name=energy_cost,json=energyCost,proto3" json:"energy_cost,omitempty"`
	Energy          uint32               `protobuf:"varint,6,opt,name=energy,proto3" json:"energy,omitempty"`
	EnergyRecoverAt int64                `protobuf:"varint,7,opt,name=energy_recover_at,json=energyRecoverAt,proto3" json:"energy_recover_at,omitempty"`
	Dmg             uint64               `protobuf:"varint,8,opt,name=dmg,proto3" json:"dmg,omitempty"`
	DmgRate         uint64               `protobuf:"varint,9,opt,name=dmg_rate,json=dmgRate,proto3" json:"dmg_rate,omitempty"`
	HiddenBoss      *HiddenBoss          `protobuf:"bytes,10,opt,name=hidden_boss,json=hiddenBoss,proto3" json:"hidden_boss,omitempty"`
	BossHp          uint64               `protobuf:"varint,11,opt,name=boss_hp,json=bossHp,proto3" json:"boss_hp,omitempty"`
	PlayerHp        uint64               `protobuf:"varint,12,opt,name=player_hp,json=playerHp,proto3" json:"player_hp,omitempty"`
	BossRsc         *BossRsc             `protobuf:"bytes,13,opt,name=boss_rsc,json=bossRsc,proto3" json:"boss_rsc,omitempty"`
	BuffCards       []*BuffCard          `protobuf:"bytes,14,rep,name=buff_cards,json=buffCards,proto3" json:"buff_cards,omitempty"`
	BuffCardStatus  EGame_BuffCardStatus `protobuf:"varint,15,opt,name=buff_card_status,json=buffCardStatus,proto3,enum=mpb.EGame_BuffCardStatus" json:"buff_card_status,omitempty"`
}

func (x *ResFight) Reset() {
	*x = ResFight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResFight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResFight) ProtoMessage() {}

func (x *ResFight) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResFight.ProtoReflect.Descriptor instead.
func (*ResFight) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{1}
}

func (x *ResFight) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

func (x *ResFight) GetBossDie() bool {
	if x != nil {
		return x.BossDie
	}
	return false
}

func (x *ResFight) GetDetails() []*FightDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ResFight) GetAwards() *CAwards {
	if x != nil {
		return x.Awards
	}
	return nil
}

func (x *ResFight) GetEnergyCost() uint32 {
	if x != nil {
		return x.EnergyCost
	}
	return 0
}

func (x *ResFight) GetEnergy() uint32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *ResFight) GetEnergyRecoverAt() int64 {
	if x != nil {
		return x.EnergyRecoverAt
	}
	return 0
}

func (x *ResFight) GetDmg() uint64 {
	if x != nil {
		return x.Dmg
	}
	return 0
}

func (x *ResFight) GetDmgRate() uint64 {
	if x != nil {
		return x.DmgRate
	}
	return 0
}

func (x *ResFight) GetHiddenBoss() *HiddenBoss {
	if x != nil {
		return x.HiddenBoss
	}
	return nil
}

func (x *ResFight) GetBossHp() uint64 {
	if x != nil {
		return x.BossHp
	}
	return 0
}

func (x *ResFight) GetPlayerHp() uint64 {
	if x != nil {
		return x.PlayerHp
	}
	return 0
}

func (x *ResFight) GetBossRsc() *BossRsc {
	if x != nil {
		return x.BossRsc
	}
	return nil
}

func (x *ResFight) GetBuffCards() []*BuffCard {
	if x != nil {
		return x.BuffCards
	}
	return nil
}

func (x *ResFight) GetBuffCardStatus() EGame_BuffCardStatus {
	if x != nil {
		return x.BuffCardStatus
	}
	return EGame_BuffCardStatus_None
}

type ResGetEnergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Energy   uint32 `protobuf:"varint,1,opt,name=energy,proto3" json:"energy,omitempty"`
	UpdateAt int64  `protobuf:"varint,2,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *ResGetEnergy) Reset() {
	*x = ResGetEnergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetEnergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetEnergy) ProtoMessage() {}

func (x *ResGetEnergy) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetEnergy.ProtoReflect.Descriptor instead.
func (*ResGetEnergy) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{2}
}

func (x *ResGetEnergy) GetEnergy() uint32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *ResGetEnergy) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

type ReqAddEnergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Energy uint32 `protobuf:"varint,2,opt,name=energy,proto3" json:"energy,omitempty"`
}

func (x *ReqAddEnergy) Reset() {
	*x = ReqAddEnergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAddEnergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAddEnergy) ProtoMessage() {}

func (x *ReqAddEnergy) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAddEnergy.ProtoReflect.Descriptor instead.
func (*ReqAddEnergy) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{3}
}

func (x *ReqAddEnergy) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqAddEnergy) GetEnergy() uint32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

type ResAddEnergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Energy   uint32 `protobuf:"varint,1,opt,name=energy,proto3" json:"energy,omitempty"`
	UpdateAt int64  `protobuf:"varint,2,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *ResAddEnergy) Reset() {
	*x = ResAddEnergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAddEnergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAddEnergy) ProtoMessage() {}

func (x *ResAddEnergy) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAddEnergy.ProtoReflect.Descriptor instead.
func (*ResAddEnergy) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{4}
}

func (x *ResAddEnergy) GetEnergy() uint32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *ResAddEnergy) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

type ReqGetHiddenBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BossUuid       uint64 `protobuf:"varint,2,opt,name=boss_uuid,json=bossUuid,proto3" json:"boss_uuid,omitempty"`
	WithBossDetail bool   `protobuf:"varint,3,opt,name=with_boss_detail,json=withBossDetail,proto3" json:"with_boss_detail,omitempty"`
}

func (x *ReqGetHiddenBoss) Reset() {
	*x = ReqGetHiddenBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetHiddenBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetHiddenBoss) ProtoMessage() {}

func (x *ReqGetHiddenBoss) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetHiddenBoss.ProtoReflect.Descriptor instead.
func (*ReqGetHiddenBoss) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{5}
}

func (x *ReqGetHiddenBoss) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetHiddenBoss) GetBossUuid() uint64 {
	if x != nil {
		return x.BossUuid
	}
	return 0
}

func (x *ReqGetHiddenBoss) GetWithBossDetail() bool {
	if x != nil {
		return x.WithBossDetail
	}
	return false
}

type ResGetHiddenBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiddenBoss *HiddenBoss               `protobuf:"bytes,1,opt,name=hidden_boss,json=hiddenBoss,proto3" json:"hidden_boss,omitempty"`
	Fought     bool                      `protobuf:"varint,2,opt,name=fought,proto3" json:"fought,omitempty"`
	FightCd    int64                     `protobuf:"varint,3,opt,name=fight_cd,json=fightCd,proto3" json:"fight_cd,omitempty"`
	Histories  []*HiddenBossFightHistory `protobuf:"bytes,4,rep,name=histories,proto3" json:"histories,omitempty"`
	BossRsc    *BossRsc                  `protobuf:"bytes,5,opt,name=boss_rsc,json=bossRsc,proto3" json:"boss_rsc,omitempty"`
}

func (x *ResGetHiddenBoss) Reset() {
	*x = ResGetHiddenBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetHiddenBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetHiddenBoss) ProtoMessage() {}

func (x *ResGetHiddenBoss) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetHiddenBoss.ProtoReflect.Descriptor instead.
func (*ResGetHiddenBoss) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{6}
}

func (x *ResGetHiddenBoss) GetHiddenBoss() *HiddenBoss {
	if x != nil {
		return x.HiddenBoss
	}
	return nil
}

func (x *ResGetHiddenBoss) GetFought() bool {
	if x != nil {
		return x.Fought
	}
	return false
}

func (x *ResGetHiddenBoss) GetFightCd() int64 {
	if x != nil {
		return x.FightCd
	}
	return 0
}

func (x *ResGetHiddenBoss) GetHistories() []*HiddenBossFightHistory {
	if x != nil {
		return x.Histories
	}
	return nil
}

func (x *ResGetHiddenBoss) GetBossRsc() *BossRsc {
	if x != nil {
		return x.BossRsc
	}
	return nil
}

type ReqNewHiddenBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BossId uint32 `protobuf:"varint,2,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
}

func (x *ReqNewHiddenBoss) Reset() {
	*x = ReqNewHiddenBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqNewHiddenBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqNewHiddenBoss) ProtoMessage() {}

func (x *ReqNewHiddenBoss) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqNewHiddenBoss.ProtoReflect.Descriptor instead.
func (*ReqNewHiddenBoss) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{7}
}

func (x *ReqNewHiddenBoss) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqNewHiddenBoss) GetBossId() uint32 {
	if x != nil {
		return x.BossId
	}
	return 0
}

type ResNewHiddenBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiddenBoss *HiddenBoss `protobuf:"bytes,1,opt,name=hidden_boss,json=hiddenBoss,proto3" json:"hidden_boss,omitempty"`
}

func (x *ResNewHiddenBoss) Reset() {
	*x = ResNewHiddenBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResNewHiddenBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResNewHiddenBoss) ProtoMessage() {}

func (x *ResNewHiddenBoss) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResNewHiddenBoss.ProtoReflect.Descriptor instead.
func (*ResNewHiddenBoss) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{8}
}

func (x *ResNewHiddenBoss) GetHiddenBoss() *HiddenBoss {
	if x != nil {
		return x.HiddenBoss
	}
	return nil
}

type ResGetGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Energy            uint32               `protobuf:"varint,1,opt,name=energy,proto3" json:"energy,omitempty"`
	UpdateAt          int64                `protobuf:"varint,2,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	BossDefeatHistory *BossDefeatHistory   `protobuf:"bytes,3,opt,name=boss_defeat_history,json=bossDefeatHistory,proto3" json:"boss_defeat_history,omitempty"`
	BuffCards         []*BuffCard          `protobuf:"bytes,4,rep,name=buff_cards,json=buffCards,proto3" json:"buff_cards,omitempty"`
	BuffCardStatus    EGame_BuffCardStatus `protobuf:"varint,5,opt,name=buff_card_status,json=buffCardStatus,proto3,enum=mpb.EGame_BuffCardStatus" json:"buff_card_status,omitempty"`
}

func (x *ResGetGameInfo) Reset() {
	*x = ResGetGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetGameInfo) ProtoMessage() {}

func (x *ResGetGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetGameInfo.ProtoReflect.Descriptor instead.
func (*ResGetGameInfo) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{9}
}

func (x *ResGetGameInfo) GetEnergy() uint32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *ResGetGameInfo) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *ResGetGameInfo) GetBossDefeatHistory() *BossDefeatHistory {
	if x != nil {
		return x.BossDefeatHistory
	}
	return nil
}

func (x *ResGetGameInfo) GetBuffCards() []*BuffCard {
	if x != nil {
		return x.BuffCards
	}
	return nil
}

func (x *ResGetGameInfo) GetBuffCardStatus() EGame_BuffCardStatus {
	if x != nil {
		return x.BuffCardStatus
	}
	return EGame_BuffCardStatus_None
}

type ReqFightPVP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TargetId   uint64 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetRank uint32 `protobuf:"varint,3,opt,name=target_rank,json=targetRank,proto3" json:"target_rank,omitempty"`
}

func (x *ReqFightPVP) Reset() {
	*x = ReqFightPVP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqFightPVP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqFightPVP) ProtoMessage() {}

func (x *ReqFightPVP) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqFightPVP.ProtoReflect.Descriptor instead.
func (*ReqFightPVP) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{10}
}

func (x *ReqFightPVP) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqFightPVP) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *ReqFightPVP) GetTargetRank() uint32 {
	if x != nil {
		return x.TargetRank
	}
	return 0
}

type ResFightPVP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Win                     bool           `protobuf:"varint,1,opt,name=win,proto3" json:"win,omitempty"`
	OldRank                 uint32         `protobuf:"varint,2,opt,name=old_rank,json=oldRank,proto3" json:"old_rank,omitempty"`
	NewRank                 uint32         `protobuf:"varint,3,opt,name=new_rank,json=newRank,proto3" json:"new_rank,omitempty"`
	ChallengerHp            uint64         `protobuf:"varint,4,opt,name=challenger_hp,json=challengerHp,proto3" json:"challenger_hp,omitempty"`
	DefenderHp              uint64         `protobuf:"varint,5,opt,name=defender_hp,json=defenderHp,proto3" json:"defender_hp,omitempty"`
	Details                 []*FightDetail `protobuf:"bytes,6,rep,name=details,proto3" json:"details,omitempty"`
	PvpChallengeCnt         uint32         `protobuf:"varint,7,opt,name=pvp_challenge_cnt,json=pvpChallengeCnt,proto3" json:"pvp_challenge_cnt,omitempty"`
	PvpChallengeCntUpdateAt int64          `protobuf:"varint,8,opt,name=pvp_challenge_cnt_update_at,json=pvpChallengeCntUpdateAt,proto3" json:"pvp_challenge_cnt_update_at,omitempty"`
	Mana                    uint64         `protobuf:"varint,9,opt,name=mana,proto3" json:"mana,omitempty"`
}

func (x *ResFightPVP) Reset() {
	*x = ResFightPVP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResFightPVP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResFightPVP) ProtoMessage() {}

func (x *ResFightPVP) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResFightPVP.ProtoReflect.Descriptor instead.
func (*ResFightPVP) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{11}
}

func (x *ResFightPVP) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

func (x *ResFightPVP) GetOldRank() uint32 {
	if x != nil {
		return x.OldRank
	}
	return 0
}

func (x *ResFightPVP) GetNewRank() uint32 {
	if x != nil {
		return x.NewRank
	}
	return 0
}

func (x *ResFightPVP) GetChallengerHp() uint64 {
	if x != nil {
		return x.ChallengerHp
	}
	return 0
}

func (x *ResFightPVP) GetDefenderHp() uint64 {
	if x != nil {
		return x.DefenderHp
	}
	return 0
}

func (x *ResFightPVP) GetDetails() []*FightDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ResFightPVP) GetPvpChallengeCnt() uint32 {
	if x != nil {
		return x.PvpChallengeCnt
	}
	return 0
}

func (x *ResFightPVP) GetPvpChallengeCntUpdateAt() int64 {
	if x != nil {
		return x.PvpChallengeCntUpdateAt
	}
	return 0
}

func (x *ResFightPVP) GetMana() uint64 {
	if x != nil {
		return x.Mana
	}
	return 0
}

type ResGetPVPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                  uint32              `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	ChallengerCnt         uint32              `protobuf:"varint,2,opt,name=challenger_cnt,json=challengerCnt,proto3" json:"challenger_cnt,omitempty"`
	ChallengerCntUpdateAt int64               `protobuf:"varint,3,opt,name=challenger_cnt_update_at,json=challengerCntUpdateAt,proto3" json:"challenger_cnt_update_at,omitempty"`
	PvpSettleRewards      []*PVPSettleRewards `protobuf:"bytes,4,rep,name=pvp_settle_rewards,json=pvpSettleRewards,proto3" json:"pvp_settle_rewards,omitempty"`
	PvpSeasonDate         uint32              `protobuf:"varint,5,opt,name=pvp_season_date,json=pvpSeasonDate,proto3" json:"pvp_season_date,omitempty"` // 20240101
	PvpManaAwardsPool     uint64              `protobuf:"varint,6,opt,name=pvp_mana_awards_pool,json=pvpManaAwardsPool,proto3" json:"pvp_mana_awards_pool,omitempty"`
}

func (x *ResGetPVPInfo) Reset() {
	*x = ResGetPVPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetPVPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetPVPInfo) ProtoMessage() {}

func (x *ResGetPVPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetPVPInfo.ProtoReflect.Descriptor instead.
func (*ResGetPVPInfo) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{12}
}

func (x *ResGetPVPInfo) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResGetPVPInfo) GetChallengerCnt() uint32 {
	if x != nil {
		return x.ChallengerCnt
	}
	return 0
}

func (x *ResGetPVPInfo) GetChallengerCntUpdateAt() int64 {
	if x != nil {
		return x.ChallengerCntUpdateAt
	}
	return 0
}

func (x *ResGetPVPInfo) GetPvpSettleRewards() []*PVPSettleRewards {
	if x != nil {
		return x.PvpSettleRewards
	}
	return nil
}

func (x *ResGetPVPInfo) GetPvpSeasonDate() uint32 {
	if x != nil {
		return x.PvpSeasonDate
	}
	return 0
}

func (x *ResGetPVPInfo) GetPvpManaAwardsPool() uint64 {
	if x != nil {
		return x.PvpManaAwardsPool
	}
	return 0
}

type ReqGetPVPRanks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum uint32 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
}

func (x *ReqGetPVPRanks) Reset() {
	*x = ReqGetPVPRanks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetPVPRanks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetPVPRanks) ProtoMessage() {}

func (x *ReqGetPVPRanks) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetPVPRanks.ProtoReflect.Descriptor instead.
func (*ReqGetPVPRanks) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{13}
}

func (x *ReqGetPVPRanks) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type ResGetPVPRanks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  uint32         `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	RankList []*PVPRankNode `protobuf:"bytes,2,rep,name=rank_list,json=rankList,proto3" json:"rank_list,omitempty"`
}

func (x *ResGetPVPRanks) Reset() {
	*x = ResGetPVPRanks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetPVPRanks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetPVPRanks) ProtoMessage() {}

func (x *ResGetPVPRanks) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetPVPRanks.ProtoReflect.Descriptor instead.
func (*ResGetPVPRanks) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{14}
}

func (x *ResGetPVPRanks) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ResGetPVPRanks) GetRankList() []*PVPRankNode {
	if x != nil {
		return x.RankList
	}
	return nil
}

type ResGetPVPChallengeTargets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetList []*PVPRankNode `protobuf:"bytes,1,rep,name=target_list,json=targetList,proto3" json:"target_list,omitempty"`
}

func (x *ResGetPVPChallengeTargets) Reset() {
	*x = ResGetPVPChallengeTargets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetPVPChallengeTargets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetPVPChallengeTargets) ProtoMessage() {}

func (x *ResGetPVPChallengeTargets) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetPVPChallengeTargets.ProtoReflect.Descriptor instead.
func (*ResGetPVPChallengeTargets) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{15}
}

func (x *ResGetPVPChallengeTargets) GetTargetList() []*PVPRankNode {
	if x != nil {
		return x.TargetList
	}
	return nil
}

type ResGetPVPHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PVPHistory `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ResGetPVPHistory) Reset() {
	*x = ResGetPVPHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetPVPHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetPVPHistory) ProtoMessage() {}

func (x *ResGetPVPHistory) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetPVPHistory.ProtoReflect.Descriptor instead.
func (*ResGetPVPHistory) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{16}
}

func (x *ResGetPVPHistory) GetList() []*PVPHistory {
	if x != nil {
		return x.List
	}
	return nil
}

type ReqRandomBuffCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BossId uint32 `protobuf:"varint,2,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
}

func (x *ReqRandomBuffCards) Reset() {
	*x = ReqRandomBuffCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRandomBuffCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRandomBuffCards) ProtoMessage() {}

func (x *ReqRandomBuffCards) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRandomBuffCards.ProtoReflect.Descriptor instead.
func (*ReqRandomBuffCards) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{17}
}

func (x *ReqRandomBuffCards) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqRandomBuffCards) GetBossId() uint32 {
	if x != nil {
		return x.BossId
	}
	return 0
}

type ResRandomBuffCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId    uint32   `protobuf:"varint,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	BuffCards []uint32 `protobuf:"varint,2,rep,packed,name=buff_cards,json=buffCards,proto3" json:"buff_cards,omitempty"`
}

func (x *ResRandomBuffCards) Reset() {
	*x = ResRandomBuffCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResRandomBuffCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResRandomBuffCards) ProtoMessage() {}

func (x *ResRandomBuffCards) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResRandomBuffCards.ProtoReflect.Descriptor instead.
func (*ResRandomBuffCards) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{18}
}

func (x *ResRandomBuffCards) GetBossId() uint32 {
	if x != nil {
		return x.BossId
	}
	return 0
}

func (x *ResRandomBuffCards) GetBuffCards() []uint32 {
	if x != nil {
		return x.BuffCards
	}
	return nil
}

type ReqChoseBuffCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BuffCard uint32 `protobuf:"varint,2,opt,name=buff_card,json=buffCard,proto3" json:"buff_card,omitempty"`
}

func (x *ReqChoseBuffCard) Reset() {
	*x = ReqChoseBuffCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqChoseBuffCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqChoseBuffCard) ProtoMessage() {}

func (x *ReqChoseBuffCard) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqChoseBuffCard.ProtoReflect.Descriptor instead.
func (*ReqChoseBuffCard) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{19}
}

func (x *ReqChoseBuffCard) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqChoseBuffCard) GetBuffCard() uint32 {
	if x != nil {
		return x.BuffCard
	}
	return 0
}

type ResChoseBuffCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffCards []uint32 `protobuf:"varint,1,rep,packed,name=buff_cards,json=buffCards,proto3" json:"buff_cards,omitempty"`
}

func (x *ResChoseBuffCard) Reset() {
	*x = ResChoseBuffCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_game_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResChoseBuffCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResChoseBuffCard) ProtoMessage() {}

func (x *ResChoseBuffCard) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_game_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResChoseBuffCard.ProtoReflect.Descriptor instead.
func (*ResChoseBuffCard) Descriptor() ([]byte, []int) {
	return file_grpc_game_proto_rawDescGZIP(), []int{20}
}

func (x *ResChoseBuffCard) GetBuffCards() []uint32 {
	if x != nil {
		return x.BuffCards
	}
	return nil
}

var File_grpc_game_proto protoreflect.FileDescriptor

var file_grpc_game_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x6d, 0x70, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6f, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68,
	0x42, 0x6f, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x9f, 0x04, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x64, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6f, 0x73,
	0x73, 0x44, 0x69, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x24, 0x0a, 0x06, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x06,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x6d, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x6d, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x6d, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x64, 0x6d, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x0a,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x68, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6f, 0x73,
	0x73, 0x48, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x70,
	0x12, 0x27, 0x0a, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x73, 0x63, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x73, 0x63,
	0x52, 0x07, 0x62, 0x6f, 0x73, 0x73, 0x52, 0x73, 0x63, 0x12, 0x2c, 0x0a, 0x0a, 0x62, 0x75, 0x66,
	0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x62, 0x75,
	0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x62, 0x75, 0x66, 0x66, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x62, 0x75,
	0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x43, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x22, 0x3f, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x22, 0x43, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x72, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74,
	0x68, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xdb, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73,
	0x12, 0x30, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x63, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x73, 0x63,
	0x52, 0x07, 0x62, 0x6f, 0x73, 0x73, 0x52, 0x73, 0x63, 0x22, 0x44, 0x0a, 0x10, 0x52, 0x65, 0x71,
	0x4e, 0x65, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x22,
	0x44, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x4e, 0x65, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42,
	0x6f, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x62, 0x6f,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x42, 0x6f, 0x73, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x46, 0x0a,
	0x13, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x70, 0x62,
	0x2e, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x11, 0x62, 0x6f, 0x73, 0x73, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x70, 0x62, 0x2e,
	0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6d, 0x70, 0x62, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x64, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x46,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x56, 0x50, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0xc5,
	0x02, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x56, 0x50, 0x12, 0x10,
	0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x5f, 0x68, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x48, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x70, 0x12, 0x2a, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x76, 0x70, 0x5f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x76, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x43, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x70, 0x76, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x70, 0x76, 0x70, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x22, 0xa1, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x50, 0x56, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72,
	0x43, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x72, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x72, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x43, 0x0a, 0x12,
	0x70, 0x76, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x50,
	0x56, 0x50, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x10, 0x70, 0x76, 0x70, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x76, 0x70, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x76, 0x70, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x76, 0x70,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x76, 0x70, 0x4d, 0x61, 0x6e, 0x61,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x2b, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x50, 0x56, 0x50, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x5a, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x50, 0x56, 0x50, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x56,
	0x50, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x50, 0x56, 0x50,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x31, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x56, 0x50, 0x52,
	0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x50, 0x56, 0x50,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x50, 0x56, 0x50, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x12,
	0x52, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x6f, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6f,
	0x73, 0x73, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6f, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x22, 0x48, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x22, 0x31, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x73, 0x32,
	0xdd, 0x06, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73,
	0x12, 0x15, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x1a, 0x15, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x05, 0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0d, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x46, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x56,
	0x50, 0x12, 0x10, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x56, 0x50, 0x1a, 0x10, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x56, 0x50, 0x12, 0x30, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x56, 0x50, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74,
	0x50, 0x56, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x56,
	0x50, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x13, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x50, 0x56, 0x50, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x1a, 0x13, 0x2e, 0x6d, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x50, 0x56, 0x50, 0x52, 0x61, 0x6e, 0x6b, 0x73,
	0x12, 0x48, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x56, 0x50, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x0e, 0x2e, 0x6d, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x1e, 0x2e, 0x6d, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x50, 0x56, 0x50, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x0e, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x11, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x1a, 0x11, 0x2e, 0x6d, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x43, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x42, 0x6f, 0x73, 0x73, 0x12, 0x15, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x1a, 0x15, 0x2e, 0x6d, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f,
	0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42,
	0x6f, 0x73, 0x73, 0x12, 0x15, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x1a, 0x15, 0x2e, 0x6d, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x4e, 0x65, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73,
	0x73, 0x12, 0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x1a, 0x13, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x56, 0x50, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0a, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x15, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x50,
	0x56, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0f, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x2e, 0x6d,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x75, 0x66, 0x66,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x17, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3d,
	0x0a, 0x0d, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x15, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x1a, 0x15, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x43, 0x68, 0x6f, 0x73, 0x65, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x12, 0x30, 0x0a,
	0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x12, 0x0e, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42,
	0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6d, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_game_proto_rawDescOnce sync.Once
	file_grpc_game_proto_rawDescData = file_grpc_game_proto_rawDesc
)

func file_grpc_game_proto_rawDescGZIP() []byte {
	file_grpc_game_proto_rawDescOnce.Do(func() {
		file_grpc_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_game_proto_rawDescData)
	})
	return file_grpc_game_proto_rawDescData
}

var file_grpc_game_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_grpc_game_proto_goTypes = []interface{}{
	(*ReqFight)(nil),                  // 0: mpb.ReqFight
	(*ResFight)(nil),                  // 1: mpb.ResFight
	(*ResGetEnergy)(nil),              // 2: mpb.ResGetEnergy
	(*ReqAddEnergy)(nil),              // 3: mpb.ReqAddEnergy
	(*ResAddEnergy)(nil),              // 4: mpb.ResAddEnergy
	(*ReqGetHiddenBoss)(nil),          // 5: mpb.ReqGetHiddenBoss
	(*ResGetHiddenBoss)(nil),          // 6: mpb.ResGetHiddenBoss
	(*ReqNewHiddenBoss)(nil),          // 7: mpb.ReqNewHiddenBoss
	(*ResNewHiddenBoss)(nil),          // 8: mpb.ResNewHiddenBoss
	(*ResGetGameInfo)(nil),            // 9: mpb.ResGetGameInfo
	(*ReqFightPVP)(nil),               // 10: mpb.ReqFightPVP
	(*ResFightPVP)(nil),               // 11: mpb.ResFightPVP
	(*ResGetPVPInfo)(nil),             // 12: mpb.ResGetPVPInfo
	(*ReqGetPVPRanks)(nil),            // 13: mpb.ReqGetPVPRanks
	(*ResGetPVPRanks)(nil),            // 14: mpb.ResGetPVPRanks
	(*ResGetPVPChallengeTargets)(nil), // 15: mpb.ResGetPVPChallengeTargets
	(*ResGetPVPHistory)(nil),          // 16: mpb.ResGetPVPHistory
	(*ReqRandomBuffCards)(nil),        // 17: mpb.ReqRandomBuffCards
	(*ResRandomBuffCards)(nil),        // 18: mpb.ResRandomBuffCards
	(*ReqChoseBuffCard)(nil),          // 19: mpb.ReqChoseBuffCard
	(*ResChoseBuffCard)(nil),          // 20: mpb.ResChoseBuffCard
	(*FightDetail)(nil),               // 21: mpb.FightDetail
	(*CAwards)(nil),                   // 22: mpb.CAwards
	(*HiddenBoss)(nil),                // 23: mpb.HiddenBoss
	(*BossRsc)(nil),                   // 24: mpb.BossRsc
	(*BuffCard)(nil),                  // 25: mpb.BuffCard
	(EGame_BuffCardStatus)(0),         // 26: mpb.EGame.BuffCardStatus
	(*HiddenBossFightHistory)(nil),    // 27: mpb.HiddenBossFightHistory
	(*BossDefeatHistory)(nil),         // 28: mpb.BossDefeatHistory
	(*PVPSettleRewards)(nil),          // 29: mpb.PVPSettleRewards
	(*PVPRankNode)(nil),               // 30: mpb.PVPRankNode
	(*PVPHistory)(nil),                // 31: mpb.PVPHistory
	(*ReqUserId)(nil),                 // 32: mpb.ReqUserId
	(*Empty)(nil),                     // 33: mpb.Empty
}
var file_grpc_game_proto_depIdxs = []int32{
	21, // 0: mpb.ResFight.details:type_name -> mpb.FightDetail
	22, // 1: mpb.ResFight.awards:type_name -> mpb.CAwards
	23, // 2: mpb.ResFight.hidden_boss:type_name -> mpb.HiddenBoss
	24, // 3: mpb.ResFight.boss_rsc:type_name -> mpb.BossRsc
	25, // 4: mpb.ResFight.buff_cards:type_name -> mpb.BuffCard
	26, // 5: mpb.ResFight.buff_card_status:type_name -> mpb.EGame.BuffCardStatus
	23, // 6: mpb.ResGetHiddenBoss.hidden_boss:type_name -> mpb.HiddenBoss
	27, // 7: mpb.ResGetHiddenBoss.histories:type_name -> mpb.HiddenBossFightHistory
	24, // 8: mpb.ResGetHiddenBoss.boss_rsc:type_name -> mpb.BossRsc
	23, // 9: mpb.ResNewHiddenBoss.hidden_boss:type_name -> mpb.HiddenBoss
	28, // 10: mpb.ResGetGameInfo.boss_defeat_history:type_name -> mpb.BossDefeatHistory
	25, // 11: mpb.ResGetGameInfo.buff_cards:type_name -> mpb.BuffCard
	26, // 12: mpb.ResGetGameInfo.buff_card_status:type_name -> mpb.EGame.BuffCardStatus
	21, // 13: mpb.ResFightPVP.details:type_name -> mpb.FightDetail
	29, // 14: mpb.ResGetPVPInfo.pvp_settle_rewards:type_name -> mpb.PVPSettleRewards
	30, // 15: mpb.ResGetPVPRanks.rank_list:type_name -> mpb.PVPRankNode
	30, // 16: mpb.ResGetPVPChallengeTargets.target_list:type_name -> mpb.PVPRankNode
	31, // 17: mpb.ResGetPVPHistory.list:type_name -> mpb.PVPHistory
	5,  // 18: mpb.GameService.GetHiddenBoss:input_type -> mpb.ReqGetHiddenBoss
	0,  // 19: mpb.GameService.Fight:input_type -> mpb.ReqFight
	10, // 20: mpb.GameService.FightPVP:input_type -> mpb.ReqFightPVP
	32, // 21: mpb.GameService.GetPVPInfo:input_type -> mpb.ReqUserId
	13, // 22: mpb.GameService.GetPVPRanks:input_type -> mpb.ReqGetPVPRanks
	32, // 23: mpb.GameService.GetPVPChallengeTargets:input_type -> mpb.ReqUserId
	32, // 24: mpb.GameService.GetEnergy:input_type -> mpb.ReqUserId
	3,  // 25: mpb.GameService.AddEnergy:input_type -> mpb.ReqAddEnergy
	5,  // 26: mpb.GameService.GetRandomHiddenBoss:input_type -> mpb.ReqGetHiddenBoss
	7,  // 27: mpb.GameService.NewHiddenBoss:input_type -> mpb.ReqNewHiddenBoss
	32, // 28: mpb.GameService.GetGameInfo:input_type -> mpb.ReqUserId
	33, // 29: mpb.GameService.GetPVPHistory:input_type -> mpb.Empty
	17, // 30: mpb.GameService.RandomBuffCards:input_type -> mpb.ReqRandomBuffCards
	19, // 31: mpb.GameService.ChoseBuffCard:input_type -> mpb.ReqChoseBuffCard
	32, // 32: mpb.GameService.AdminRecoverEnergy:input_type -> mpb.ReqUserId
	6,  // 33: mpb.GameService.GetHiddenBoss:output_type -> mpb.ResGetHiddenBoss
	1,  // 34: mpb.GameService.Fight:output_type -> mpb.ResFight
	11, // 35: mpb.GameService.FightPVP:output_type -> mpb.ResFightPVP
	12, // 36: mpb.GameService.GetPVPInfo:output_type -> mpb.ResGetPVPInfo
	14, // 37: mpb.GameService.GetPVPRanks:output_type -> mpb.ResGetPVPRanks
	15, // 38: mpb.GameService.GetPVPChallengeTargets:output_type -> mpb.ResGetPVPChallengeTargets
	2,  // 39: mpb.GameService.GetEnergy:output_type -> mpb.ResGetEnergy
	4,  // 40: mpb.GameService.AddEnergy:output_type -> mpb.ResAddEnergy
	6,  // 41: mpb.GameService.GetRandomHiddenBoss:output_type -> mpb.ResGetHiddenBoss
	8,  // 42: mpb.GameService.NewHiddenBoss:output_type -> mpb.ResNewHiddenBoss
	9,  // 43: mpb.GameService.GetGameInfo:output_type -> mpb.ResGetGameInfo
	16, // 44: mpb.GameService.GetPVPHistory:output_type -> mpb.ResGetPVPHistory
	18, // 45: mpb.GameService.RandomBuffCards:output_type -> mpb.ResRandomBuffCards
	20, // 46: mpb.GameService.ChoseBuffCard:output_type -> mpb.ResChoseBuffCard
	33, // 47: mpb.GameService.AdminRecoverEnergy:output_type -> mpb.Empty
	33, // [33:48] is the sub-list for method output_type
	18, // [18:33] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_grpc_game_proto_init() }
func file_grpc_game_proto_init() {
	if File_grpc_game_proto != nil {
		return
	}
	file_common_proto_init()
	file_resource_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_grpc_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResFight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetEnergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAddEnergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAddEnergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetHiddenBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetHiddenBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqNewHiddenBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResNewHiddenBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqFightPVP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResFightPVP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetPVPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetPVPRanks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetPVPRanks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetPVPChallengeTargets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetPVPHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRandomBuffCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResRandomBuffCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqChoseBuffCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_game_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResChoseBuffCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_game_proto_goTypes,
		DependencyIndexes: file_grpc_game_proto_depIdxs,
		MessageInfos:      file_grpc_game_proto_msgTypes,
	}.Build()
	File_grpc_game_proto = out.File
	file_grpc_game_proto_rawDesc = nil
	file_grpc_game_proto_goTypes = nil
	file_grpc_game_proto_depIdxs = nil
}
