// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: db_game.proto

package mpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DBEnergy struct {
	Energy               uint32   `protobuf:"varint,1,opt,name=energy,proto3" json:"energy,omitempty"`
	RecoverAt            int64    `protobuf:"varint,2,opt,name=recover_at,json=recoverAt,proto3" json:"recover_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBEnergy) Reset()         { *m = DBEnergy{} }
func (m *DBEnergy) String() string { return proto.CompactTextString(m) }
func (*DBEnergy) ProtoMessage()    {}
func (*DBEnergy) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{0}
}
func (m *DBEnergy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBEnergy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBEnergy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBEnergy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBEnergy.Merge(m, src)
}
func (m *DBEnergy) XXX_Size() int {
	return m.Size()
}
func (m *DBEnergy) XXX_DiscardUnknown() {
	xxx_messageInfo_DBEnergy.DiscardUnknown(m)
}

var xxx_messageInfo_DBEnergy proto.InternalMessageInfo

func (m *DBEnergy) GetEnergy() uint32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *DBEnergy) GetRecoverAt() int64 {
	if m != nil {
		return m.RecoverAt
	}
	return 0
}

type DBFightHistory struct {
	WinTimes             map[uint32]uint32 `protobuf:"bytes,1,rep,name=win_times,json=winTimes,proto3" json:"win_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DBFightHistory) Reset()         { *m = DBFightHistory{} }
func (m *DBFightHistory) String() string { return proto.CompactTextString(m) }
func (*DBFightHistory) ProtoMessage()    {}
func (*DBFightHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{1}
}
func (m *DBFightHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBFightHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBFightHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBFightHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBFightHistory.Merge(m, src)
}
func (m *DBFightHistory) XXX_Size() int {
	return m.Size()
}
func (m *DBFightHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_DBFightHistory.DiscardUnknown(m)
}

var xxx_messageInfo_DBFightHistory proto.InternalMessageInfo

func (m *DBFightHistory) GetWinTimes() map[uint32]uint32 {
	if m != nil {
		return m.WinTimes
	}
	return nil
}

type DBHiddenBossFindHistory struct {
	BossExpireAt         map[uint64]int64 `protobuf:"bytes,1,rep,name=boss_expire_at,json=bossExpireAt,proto3" json:"boss_expire_at,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DBHiddenBossFindHistory) Reset()         { *m = DBHiddenBossFindHistory{} }
func (m *DBHiddenBossFindHistory) String() string { return proto.CompactTextString(m) }
func (*DBHiddenBossFindHistory) ProtoMessage()    {}
func (*DBHiddenBossFindHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{2}
}
func (m *DBHiddenBossFindHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBHiddenBossFindHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBHiddenBossFindHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBHiddenBossFindHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBHiddenBossFindHistory.Merge(m, src)
}
func (m *DBHiddenBossFindHistory) XXX_Size() int {
	return m.Size()
}
func (m *DBHiddenBossFindHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_DBHiddenBossFindHistory.DiscardUnknown(m)
}

var xxx_messageInfo_DBHiddenBossFindHistory proto.InternalMessageInfo

func (m *DBHiddenBossFindHistory) GetBossExpireAt() map[uint64]int64 {
	if m != nil {
		return m.BossExpireAt
	}
	return nil
}

type DBHiddenBoss struct {
	BossUuid             uint64                      `protobuf:"varint,1,opt,name=boss_uuid,json=bossUuid,proto3" json:"boss_uuid,omitempty"`
	BossId               uint32                      `protobuf:"varint,2,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	Finder               uint64                      `protobuf:"varint,3,opt,name=finder,proto3" json:"finder,omitempty"`
	Hp                   uint64                      `protobuf:"varint,4,opt,name=hp,proto3" json:"hp,omitempty"`
	ExpiredAt            int64                       `protobuf:"varint,5,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	LastFightTime        map[uint64]int64            `protobuf:"bytes,6,rep,name=last_fight_time,json=lastFightTime,proto3" json:"last_fight_time,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Dmgs                 map[uint64]uint64           `protobuf:"bytes,7,rep,name=dmgs,proto3" json:"dmgs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Killer               uint64                      `protobuf:"varint,8,opt,name=killer,proto3" json:"killer,omitempty"`
	FightHistories       []*DBHiddenBossFightHistory `protobuf:"bytes,9,rep,name=fight_histories,json=fightHistories,proto3" json:"fight_histories,omitempty"`
	AwardAddRates        map[uint64]uint64           `protobuf:"bytes,10,rep,name=award_add_rates,json=awardAddRates,proto3" json:"award_add_rates,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DBHiddenBoss) Reset()         { *m = DBHiddenBoss{} }
func (m *DBHiddenBoss) String() string { return proto.CompactTextString(m) }
func (*DBHiddenBoss) ProtoMessage()    {}
func (*DBHiddenBoss) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{3}
}
func (m *DBHiddenBoss) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBHiddenBoss) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBHiddenBoss.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBHiddenBoss) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBHiddenBoss.Merge(m, src)
}
func (m *DBHiddenBoss) XXX_Size() int {
	return m.Size()
}
func (m *DBHiddenBoss) XXX_DiscardUnknown() {
	xxx_messageInfo_DBHiddenBoss.DiscardUnknown(m)
}

var xxx_messageInfo_DBHiddenBoss proto.InternalMessageInfo

func (m *DBHiddenBoss) GetBossUuid() uint64 {
	if m != nil {
		return m.BossUuid
	}
	return 0
}

func (m *DBHiddenBoss) GetBossId() uint32 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (m *DBHiddenBoss) GetFinder() uint64 {
	if m != nil {
		return m.Finder
	}
	return 0
}

func (m *DBHiddenBoss) GetHp() uint64 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *DBHiddenBoss) GetExpiredAt() int64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

func (m *DBHiddenBoss) GetLastFightTime() map[uint64]int64 {
	if m != nil {
		return m.LastFightTime
	}
	return nil
}

func (m *DBHiddenBoss) GetDmgs() map[uint64]uint64 {
	if m != nil {
		return m.Dmgs
	}
	return nil
}

func (m *DBHiddenBoss) GetKiller() uint64 {
	if m != nil {
		return m.Killer
	}
	return 0
}

func (m *DBHiddenBoss) GetFightHistories() []*DBHiddenBossFightHistory {
	if m != nil {
		return m.FightHistories
	}
	return nil
}

func (m *DBHiddenBoss) GetAwardAddRates() map[uint64]uint64 {
	if m != nil {
		return m.AwardAddRates
	}
	return nil
}

type DBHiddenBossFightHistory struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	DmgRate              uint64   `protobuf:"varint,2,opt,name=dmg_rate,json=dmgRate,proto3" json:"dmg_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBHiddenBossFightHistory) Reset()         { *m = DBHiddenBossFightHistory{} }
func (m *DBHiddenBossFightHistory) String() string { return proto.CompactTextString(m) }
func (*DBHiddenBossFightHistory) ProtoMessage()    {}
func (*DBHiddenBossFightHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{4}
}
func (m *DBHiddenBossFightHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBHiddenBossFightHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBHiddenBossFightHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBHiddenBossFightHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBHiddenBossFightHistory.Merge(m, src)
}
func (m *DBHiddenBossFightHistory) XXX_Size() int {
	return m.Size()
}
func (m *DBHiddenBossFightHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_DBHiddenBossFightHistory.DiscardUnknown(m)
}

var xxx_messageInfo_DBHiddenBossFightHistory proto.InternalMessageInfo

func (m *DBHiddenBossFightHistory) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *DBHiddenBossFightHistory) GetDmgRate() uint64 {
	if m != nil {
		return m.DmgRate
	}
	return 0
}

type DBBossDefeatHistoryNode struct {
	BossId               uint32   `protobuf:"varint,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	Level                uint32   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBBossDefeatHistoryNode) Reset()         { *m = DBBossDefeatHistoryNode{} }
func (m *DBBossDefeatHistoryNode) String() string { return proto.CompactTextString(m) }
func (*DBBossDefeatHistoryNode) ProtoMessage()    {}
func (*DBBossDefeatHistoryNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{5}
}
func (m *DBBossDefeatHistoryNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBBossDefeatHistoryNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBBossDefeatHistoryNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBBossDefeatHistoryNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBBossDefeatHistoryNode.Merge(m, src)
}
func (m *DBBossDefeatHistoryNode) XXX_Size() int {
	return m.Size()
}
func (m *DBBossDefeatHistoryNode) XXX_DiscardUnknown() {
	xxx_messageInfo_DBBossDefeatHistoryNode.DiscardUnknown(m)
}

var xxx_messageInfo_DBBossDefeatHistoryNode proto.InternalMessageInfo

func (m *DBBossDefeatHistoryNode) GetBossId() uint32 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (m *DBBossDefeatHistoryNode) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type DBBossDefeatHistory struct {
	BossDefeatHistory    map[uint32]*DBBossDefeatHistoryNode `protobuf:"bytes,1,rep,name=boss_defeat_history,json=bossDefeatHistory,proto3" json:"boss_defeat_history,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *DBBossDefeatHistory) Reset()         { *m = DBBossDefeatHistory{} }
func (m *DBBossDefeatHistory) String() string { return proto.CompactTextString(m) }
func (*DBBossDefeatHistory) ProtoMessage()    {}
func (*DBBossDefeatHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{6}
}
func (m *DBBossDefeatHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBBossDefeatHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBBossDefeatHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBBossDefeatHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBBossDefeatHistory.Merge(m, src)
}
func (m *DBBossDefeatHistory) XXX_Size() int {
	return m.Size()
}
func (m *DBBossDefeatHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_DBBossDefeatHistory.DiscardUnknown(m)
}

var xxx_messageInfo_DBBossDefeatHistory proto.InternalMessageInfo

func (m *DBBossDefeatHistory) GetBossDefeatHistory() map[uint32]*DBBossDefeatHistoryNode {
	if m != nil {
		return m.BossDefeatHistory
	}
	return nil
}

type DBUserPVPDailyRewardsNode struct {
	Rank                 uint32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Status               uint32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBUserPVPDailyRewardsNode) Reset()         { *m = DBUserPVPDailyRewardsNode{} }
func (m *DBUserPVPDailyRewardsNode) String() string { return proto.CompactTextString(m) }
func (*DBUserPVPDailyRewardsNode) ProtoMessage()    {}
func (*DBUserPVPDailyRewardsNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{7}
}
func (m *DBUserPVPDailyRewardsNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBUserPVPDailyRewardsNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBUserPVPDailyRewardsNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBUserPVPDailyRewardsNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBUserPVPDailyRewardsNode.Merge(m, src)
}
func (m *DBUserPVPDailyRewardsNode) XXX_Size() int {
	return m.Size()
}
func (m *DBUserPVPDailyRewardsNode) XXX_DiscardUnknown() {
	xxx_messageInfo_DBUserPVPDailyRewardsNode.DiscardUnknown(m)
}

var xxx_messageInfo_DBUserPVPDailyRewardsNode proto.InternalMessageInfo

func (m *DBUserPVPDailyRewardsNode) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *DBUserPVPDailyRewardsNode) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type DBUserPVPInfo struct {
	ChallengeCnt         uint32                                `protobuf:"varint,1,opt,name=challenge_cnt,json=challengeCnt,proto3" json:"challenge_cnt,omitempty"`
	UpdateAt             int64                                 `protobuf:"varint,2,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	RankRewards          map[string]*DBUserPVPDailyRewardsNode `protobuf:"bytes,3,rep,name=rank_rewards,json=rankRewards,proto3" json:"rank_rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *DBUserPVPInfo) Reset()         { *m = DBUserPVPInfo{} }
func (m *DBUserPVPInfo) String() string { return proto.CompactTextString(m) }
func (*DBUserPVPInfo) ProtoMessage()    {}
func (*DBUserPVPInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{8}
}
func (m *DBUserPVPInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBUserPVPInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBUserPVPInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBUserPVPInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBUserPVPInfo.Merge(m, src)
}
func (m *DBUserPVPInfo) XXX_Size() int {
	return m.Size()
}
func (m *DBUserPVPInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DBUserPVPInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DBUserPVPInfo proto.InternalMessageInfo

func (m *DBUserPVPInfo) GetChallengeCnt() uint32 {
	if m != nil {
		return m.ChallengeCnt
	}
	return 0
}

func (m *DBUserPVPInfo) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *DBUserPVPInfo) GetRankRewards() map[string]*DBUserPVPDailyRewardsNode {
	if m != nil {
		return m.RankRewards
	}
	return nil
}

type DBPVPHistory struct {
	History              map[uint32]uint64 `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DBPVPHistory) Reset()         { *m = DBPVPHistory{} }
func (m *DBPVPHistory) String() string { return proto.CompactTextString(m) }
func (*DBPVPHistory) ProtoMessage()    {}
func (*DBPVPHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{9}
}
func (m *DBPVPHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBPVPHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBPVPHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBPVPHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBPVPHistory.Merge(m, src)
}
func (m *DBPVPHistory) XXX_Size() int {
	return m.Size()
}
func (m *DBPVPHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_DBPVPHistory.DiscardUnknown(m)
}

var xxx_messageInfo_DBPVPHistory proto.InternalMessageInfo

func (m *DBPVPHistory) GetHistory() map[uint32]uint64 {
	if m != nil {
		return m.History
	}
	return nil
}

type DBBuffCardOptions struct {
	BossId               uint32   `protobuf:"varint,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	BuffCards            []uint32 `protobuf:"varint,2,rep,packed,name=buff_cards,json=buffCards,proto3" json:"buff_cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBBuffCardOptions) Reset()         { *m = DBBuffCardOptions{} }
func (m *DBBuffCardOptions) String() string { return proto.CompactTextString(m) }
func (*DBBuffCardOptions) ProtoMessage()    {}
func (*DBBuffCardOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{10}
}
func (m *DBBuffCardOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBBuffCardOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBBuffCardOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBBuffCardOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBBuffCardOptions.Merge(m, src)
}
func (m *DBBuffCardOptions) XXX_Size() int {
	return m.Size()
}
func (m *DBBuffCardOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DBBuffCardOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DBBuffCardOptions proto.InternalMessageInfo

func (m *DBBuffCardOptions) GetBossId() uint32 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (m *DBBuffCardOptions) GetBuffCards() []uint32 {
	if m != nil {
		return m.BuffCards
	}
	return nil
}

type DBBuffCardsValid struct {
	BuffCards            []*DBBuffCardsValid_Node `protobuf:"bytes,1,rep,name=buff_cards,json=buffCards,proto3" json:"buff_cards,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DBBuffCardsValid) Reset()         { *m = DBBuffCardsValid{} }
func (m *DBBuffCardsValid) String() string { return proto.CompactTextString(m) }
func (*DBBuffCardsValid) ProtoMessage()    {}
func (*DBBuffCardsValid) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{11}
}
func (m *DBBuffCardsValid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBBuffCardsValid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBBuffCardsValid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBBuffCardsValid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBBuffCardsValid.Merge(m, src)
}
func (m *DBBuffCardsValid) XXX_Size() int {
	return m.Size()
}
func (m *DBBuffCardsValid) XXX_DiscardUnknown() {
	xxx_messageInfo_DBBuffCardsValid.DiscardUnknown(m)
}

var xxx_messageInfo_DBBuffCardsValid proto.InternalMessageInfo

func (m *DBBuffCardsValid) GetBuffCards() []*DBBuffCardsValid_Node {
	if m != nil {
		return m.BuffCards
	}
	return nil
}

type DBBuffCardsValid_Node struct {
	BuffCardId           uint32   `protobuf:"varint,1,opt,name=buff_card_id,json=buffCardId,proto3" json:"buff_card_id,omitempty"`
	LeftRound            uint32   `protobuf:"varint,2,opt,name=left_round,json=leftRound,proto3" json:"left_round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBBuffCardsValid_Node) Reset()         { *m = DBBuffCardsValid_Node{} }
func (m *DBBuffCardsValid_Node) String() string { return proto.CompactTextString(m) }
func (*DBBuffCardsValid_Node) ProtoMessage()    {}
func (*DBBuffCardsValid_Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{11, 0}
}
func (m *DBBuffCardsValid_Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBBuffCardsValid_Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBBuffCardsValid_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBBuffCardsValid_Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBBuffCardsValid_Node.Merge(m, src)
}
func (m *DBBuffCardsValid_Node) XXX_Size() int {
	return m.Size()
}
func (m *DBBuffCardsValid_Node) XXX_DiscardUnknown() {
	xxx_messageInfo_DBBuffCardsValid_Node.DiscardUnknown(m)
}

var xxx_messageInfo_DBBuffCardsValid_Node proto.InternalMessageInfo

func (m *DBBuffCardsValid_Node) GetBuffCardId() uint32 {
	if m != nil {
		return m.BuffCardId
	}
	return 0
}

func (m *DBBuffCardsValid_Node) GetLeftRound() uint32 {
	if m != nil {
		return m.LeftRound
	}
	return 0
}

func init() {
	proto.RegisterType((*DBEnergy)(nil), "mpb.DBEnergy")
	proto.RegisterType((*DBFightHistory)(nil), "mpb.DBFightHistory")
	proto.RegisterMapType((map[uint32]uint32)(nil), "mpb.DBFightHistory.WinTimesEntry")
	proto.RegisterType((*DBHiddenBossFindHistory)(nil), "mpb.DBHiddenBossFindHistory")
	proto.RegisterMapType((map[uint64]int64)(nil), "mpb.DBHiddenBossFindHistory.BossExpireAtEntry")
	proto.RegisterType((*DBHiddenBoss)(nil), "mpb.DBHiddenBoss")
	proto.RegisterMapType((map[uint64]uint64)(nil), "mpb.DBHiddenBoss.AwardAddRatesEntry")
	proto.RegisterMapType((map[uint64]uint64)(nil), "mpb.DBHiddenBoss.DmgsEntry")
	proto.RegisterMapType((map[uint64]int64)(nil), "mpb.DBHiddenBoss.LastFightTimeEntry")
	proto.RegisterType((*DBHiddenBossFightHistory)(nil), "mpb.DBHiddenBossFightHistory")
	proto.RegisterType((*DBBossDefeatHistoryNode)(nil), "mpb.DBBossDefeatHistoryNode")
	proto.RegisterType((*DBBossDefeatHistory)(nil), "mpb.DBBossDefeatHistory")
	proto.RegisterMapType((map[uint32]*DBBossDefeatHistoryNode)(nil), "mpb.DBBossDefeatHistory.BossDefeatHistoryEntry")
	proto.RegisterType((*DBUserPVPDailyRewardsNode)(nil), "mpb.DBUserPVPDailyRewardsNode")
	proto.RegisterType((*DBUserPVPInfo)(nil), "mpb.DBUserPVPInfo")
	proto.RegisterMapType((map[string]*DBUserPVPDailyRewardsNode)(nil), "mpb.DBUserPVPInfo.RankRewardsEntry")
	proto.RegisterType((*DBPVPHistory)(nil), "mpb.DBPVPHistory")
	proto.RegisterMapType((map[uint32]uint64)(nil), "mpb.DBPVPHistory.HistoryEntry")
	proto.RegisterType((*DBBuffCardOptions)(nil), "mpb.DBBuffCardOptions")
	proto.RegisterType((*DBBuffCardsValid)(nil), "mpb.DBBuffCardsValid")
	proto.RegisterType((*DBBuffCardsValid_Node)(nil), "mpb.DBBuffCardsValid.Node")
}

func init() { proto.RegisterFile("db_game.proto", fileDescriptor_7167ac24ec07e167) }

var fileDescriptor_7167ac24ec07e167 = []byte{
	// 914 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0x66, 0x6d, 0x27, 0xb1, 0x5f, 0xec, 0x34, 0x99, 0x56, 0xcd, 0x76, 0x4b, 0x2c, 0xe3, 0x72,
	0xc8, 0x69, 0x23, 0x05, 0x24, 0x4a, 0x91, 0xa0, 0x76, 0x9d, 0x34, 0x15, 0x15, 0x84, 0x55, 0x1b,
	0x24, 0x0e, 0xac, 0x66, 0x3d, 0xb3, 0xf6, 0xc8, 0xfb, 0x4b, 0x3b, 0xb3, 0x09, 0xbe, 0x73, 0xe5,
	0x8a, 0xf8, 0x33, 0xf8, 0x33, 0x38, 0x72, 0xe6, 0x84, 0xc2, 0xdf, 0xc0, 0x81, 0x1b, 0x9a, 0xd9,
	0x59, 0x7b, 0x37, 0xb6, 0x55, 0xf5, 0xb6, 0xef, 0xf9, 0xbd, 0x6f, 0xbe, 0xf7, 0x7d, 0x6f, 0x26,
	0x81, 0x0e, 0xf1, 0xdc, 0x09, 0x0e, 0xa9, 0x9d, 0xa4, 0xb1, 0x88, 0x51, 0x3d, 0x4c, 0xbc, 0xfe,
	0x00, 0x9a, 0xa3, 0xe1, 0x59, 0x44, 0xd3, 0xc9, 0x1c, 0x3d, 0x84, 0x6d, 0xaa, 0xbe, 0x4c, 0xa3,
	0x67, 0x1c, 0x77, 0x1c, 0x1d, 0xa1, 0x23, 0x80, 0x94, 0x8e, 0xe3, 0x6b, 0x9a, 0xba, 0x58, 0x98,
	0xb5, 0x9e, 0x71, 0x5c, 0x77, 0x5a, 0x3a, 0x33, 0x10, 0xfd, 0x5f, 0x0c, 0xd8, 0x1b, 0x0d, 0xcf,
	0xd9, 0x64, 0x2a, 0x2e, 0x18, 0x17, 0x71, 0x3a, 0x47, 0x5f, 0x42, 0xeb, 0x86, 0x45, 0xae, 0x60,
	0x21, 0xe5, 0xa6, 0xd1, 0xab, 0x1f, 0xef, 0x9e, 0x7e, 0x64, 0x87, 0x89, 0x67, 0x57, 0xeb, 0xec,
	0xef, 0x59, 0xf4, 0x46, 0xd6, 0x9c, 0x45, 0x22, 0x9d, 0x3b, 0xcd, 0x1b, 0x1d, 0x5a, 0x5f, 0x40,
	0xa7, 0xf2, 0x13, 0xda, 0x87, 0xfa, 0x8c, 0x16, 0xbc, 0xe4, 0x27, 0x7a, 0x00, 0x5b, 0xd7, 0x38,
	0xc8, 0xa8, 0xe2, 0xd3, 0x71, 0xf2, 0xe0, 0x59, 0xed, 0xa9, 0xd1, 0xff, 0xdd, 0x80, 0xc3, 0xd1,
	0xf0, 0x82, 0x11, 0x42, 0xa3, 0x61, 0xcc, 0xf9, 0x39, 0x8b, 0x48, 0x41, 0xec, 0x0d, 0xec, 0x79,
	0x31, 0xe7, 0x2e, 0xfd, 0x29, 0x61, 0x29, 0x95, 0xe3, 0xe4, 0xec, 0x6c, 0xcd, 0x6e, 0x6d, 0x97,
	0x2d, 0xe3, 0x33, 0xd5, 0x31, 0x10, 0x39, 0xd5, 0xb6, 0x57, 0x4a, 0x59, 0x5f, 0xc1, 0xc1, 0x4a,
	0x49, 0x99, 0x72, 0x63, 0x0d, 0xe5, 0x7a, 0x99, 0xf2, 0xbf, 0x0d, 0x68, 0x97, 0x0f, 0x47, 0x8f,
	0xa1, 0xa5, 0x78, 0x66, 0x19, 0x23, 0x1a, 0xa2, 0x29, 0x13, 0x6f, 0x33, 0x46, 0xd0, 0x21, 0xec,
	0xa8, 0x1f, 0x19, 0xd1, 0xc3, 0x6f, 0xcb, 0xf0, 0x15, 0x91, 0x06, 0xfa, 0x2c, 0x22, 0x34, 0x35,
	0xeb, 0xaa, 0x45, 0x47, 0x68, 0x0f, 0x6a, 0xd3, 0xc4, 0x6c, 0xa8, 0x5c, 0x6d, 0x9a, 0x48, 0x43,
	0x73, 0x01, 0x88, 0x54, 0x60, 0x2b, 0x37, 0x54, 0x67, 0x06, 0x02, 0xbd, 0x86, 0x7b, 0x01, 0xe6,
	0xc2, 0xf5, 0xa5, 0x55, 0xca, 0x44, 0x73, 0x5b, 0xa9, 0xf4, 0xf1, 0x8a, 0x4a, 0xf6, 0x6b, 0xcc,
	0x85, 0xb2, 0x54, 0x9a, 0x95, 0x6b, 0xd3, 0x09, 0xca, 0x39, 0x74, 0x02, 0x0d, 0x12, 0x4e, 0xb8,
	0xb9, 0xa3, 0x20, 0x1e, 0xaf, 0x42, 0x8c, 0xc2, 0x89, 0x5e, 0x00, 0x55, 0x28, 0xa7, 0x98, 0xb1,
	0x20, 0xa0, 0xa9, 0xd9, 0xcc, 0xa7, 0xc8, 0x23, 0x74, 0x0e, 0xf7, 0x72, 0x46, 0x53, 0x65, 0x0b,
	0xa3, 0xdc, 0x6c, 0x29, 0xcc, 0xa3, 0x35, 0xe6, 0x2d, 0x97, 0xcc, 0xd9, 0xf3, 0x97, 0x11, 0xa3,
	0x5c, 0x8e, 0x87, 0x6f, 0x70, 0x4a, 0x5c, 0x4c, 0x88, 0x9b, 0x62, 0x41, 0xb9, 0x09, 0x9b, 0xc6,
	0x1b, 0xc8, 0xc2, 0x01, 0x21, 0x8e, 0x2c, 0xd3, 0xe3, 0xe1, 0x72, 0xce, 0x7a, 0x0e, 0x68, 0x55,
	0x83, 0xf7, 0x31, 0xdf, 0xfa, 0x0c, 0x5a, 0x0b, 0x09, 0xde, 0xd5, 0xd8, 0x28, 0x37, 0x3e, 0x07,
	0xb4, 0xca, 0xef, 0x7d, 0x10, 0xfa, 0xdf, 0x81, 0xb9, 0x49, 0x36, 0x64, 0x41, 0x33, 0x62, 0xe3,
	0x59, 0x84, 0x43, 0xaa, 0xc0, 0x5a, 0xce, 0x22, 0x46, 0x8f, 0xa0, 0x49, 0xc2, 0x89, 0x12, 0x4f,
	0x83, 0xee, 0x90, 0x70, 0x22, 0x49, 0xf4, 0x2f, 0xe4, 0xe5, 0x93, 0x60, 0x23, 0xea, 0x53, 0x5c,
	0xa0, 0x7d, 0x13, 0x13, 0x5a, 0xde, 0x5b, 0xa3, 0xb2, 0xb7, 0x0f, 0x60, 0x2b, 0xa0, 0xd7, 0x34,
	0x28, 0xee, 0xb2, 0x0a, 0xfa, 0x7f, 0x19, 0x70, 0x7f, 0x0d, 0x14, 0x72, 0xe1, 0xbe, 0x82, 0x21,
	0x2a, 0xab, 0xb7, 0x61, 0xae, 0x2f, 0xf2, 0x89, 0xf6, 0x70, 0xa5, 0xcd, 0x5e, 0xc9, 0xe4, 0x76,
	0x1e, 0x78, 0x77, 0xf3, 0x96, 0x07, 0x0f, 0xd7, 0x17, 0xaf, 0x79, 0x86, 0x4e, 0xcb, 0xda, 0xee,
	0x9e, 0x7e, 0xb8, 0xe9, 0x78, 0x29, 0x40, 0x59, 0xf9, 0x97, 0xf0, 0x68, 0x34, 0x7c, 0xcb, 0x69,
	0x7a, 0x79, 0x75, 0x39, 0xc2, 0x2c, 0x98, 0x3b, 0x54, 0x5a, 0xc9, 0x95, 0x50, 0x08, 0x1a, 0x29,
	0x8e, 0x66, 0xfa, 0x1c, 0xf5, 0x2d, 0x6f, 0x05, 0x17, 0x58, 0x64, 0xbc, 0xb8, 0xf3, 0x79, 0xd4,
	0xff, 0xcf, 0x80, 0xce, 0x02, 0xe9, 0x55, 0xe4, 0xc7, 0xe8, 0x09, 0x74, 0xc6, 0x53, 0x1c, 0x04,
	0x34, 0x9a, 0x50, 0x77, 0x1c, 0x09, 0x0d, 0xd3, 0x5e, 0x24, 0x5f, 0x44, 0x42, 0x3e, 0x30, 0x59,
	0x42, 0xb0, 0xa0, 0xcb, 0x27, 0xbd, 0x99, 0x27, 0x06, 0x02, 0x9d, 0x43, 0x5b, 0x9e, 0xe9, 0xa6,
	0x39, 0x27, 0xb3, 0xae, 0xa4, 0x7d, 0xa2, 0x67, 0x2b, 0x9d, 0x65, 0x3b, 0x38, 0x9a, 0x69, 0xe6,
	0xb9, 0x9c, 0xbb, 0xe9, 0x32, 0x63, 0xfd, 0x08, 0xfb, 0x77, 0x0b, 0xca, 0x12, 0xb6, 0x72, 0x09,
	0x3f, 0xad, 0x4a, 0xd8, 0xad, 0x1e, 0x73, 0x57, 0x9c, 0xb2, 0x88, 0x3f, 0x1b, 0xf2, 0xd9, 0xbc,
	0xbc, 0xba, 0x2c, 0x56, 0xe3, 0x29, 0xec, 0x54, 0xd7, 0xa1, 0x00, 0x5b, 0xd6, 0xd8, 0x15, 0xf7,
	0x8b, 0x72, 0xeb, 0x19, 0xb4, 0xdf, 0xe1, 0xf4, 0xe6, 0x5b, 0xf4, 0x35, 0x1c, 0x8c, 0x86, 0xc3,
	0xcc, 0xf7, 0x5f, 0xe0, 0x94, 0x7c, 0x9b, 0x08, 0x16, 0x47, 0x7c, 0xf3, 0xb2, 0x1f, 0x01, 0x78,
	0x99, 0xef, 0xbb, 0x63, 0x25, 0x6d, 0xad, 0x57, 0x3f, 0xee, 0x38, 0x2d, 0x4f, 0x77, 0xf3, 0xfe,
	0xaf, 0x06, 0xec, 0x2f, 0xd1, 0xf8, 0x15, 0x0e, 0x18, 0x41, 0x9f, 0x57, 0x7a, 0xf2, 0xd1, 0xac,
	0x62, 0xd5, 0x2a, 0xa5, 0xb6, 0xd2, 0x68, 0x89, 0x67, 0xbd, 0x84, 0x86, 0xda, 0xa9, 0x1e, 0xb4,
	0x17, 0x10, 0x4b, 0x52, 0x50, 0x14, 0xe6, 0xc4, 0x02, 0xea, 0x0b, 0x37, 0x8d, 0xb3, 0xa8, 0xf8,
	0xcb, 0xd2, 0x92, 0x19, 0x47, 0x26, 0x86, 0x87, 0x7f, 0xdc, 0x76, 0x8d, 0x3f, 0x6f, 0xbb, 0xc6,
	0xdf, 0xb7, 0x5d, 0xe3, 0xb7, 0x7f, 0xba, 0x1f, 0xfc, 0xb0, 0x65, 0x9f, 0x84, 0x89, 0xe7, 0x6d,
	0xab, 0x7f, 0x27, 0x3e, 0xf9, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xb1, 0xd4, 0x6b, 0x5f, 0x08,
	0x00, 0x00,
}

func (m *DBEnergy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBEnergy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBEnergy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RecoverAt != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.RecoverAt))
		i--
		dAtA[i] = 0x10
	}
	if m.Energy != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.Energy))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DBFightHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBFightHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBFightHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WinTimes) > 0 {
		for k := range m.WinTimes {
			v := m.WinTimes[k]
			baseI := i
			i = encodeVarintDbGame(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintDbGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DBHiddenBossFindHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBHiddenBossFindHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBHiddenBossFindHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BossExpireAt) > 0 {
		for k := range m.BossExpireAt {
			v := m.BossExpireAt[k]
			baseI := i
			i = encodeVarintDbGame(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintDbGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DBHiddenBoss) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBHiddenBoss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBHiddenBoss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AwardAddRates) > 0 {
		for k := range m.AwardAddRates {
			v := m.AwardAddRates[k]
			baseI := i
			i = encodeVarintDbGame(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintDbGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.FightHistories) > 0 {
		for iNdEx := len(m.FightHistories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FightHistories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDbGame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Killer != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.Killer))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Dmgs) > 0 {
		for k := range m.Dmgs {
			v := m.Dmgs[k]
			baseI := i
			i = encodeVarintDbGame(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintDbGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.LastFightTime) > 0 {
		for k := range m.LastFightTime {
			v := m.LastFightTime[k]
			baseI := i
			i = encodeVarintDbGame(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintDbGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ExpiredAt != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.ExpiredAt))
		i--
		dAtA[i] = 0x28
	}
	if m.Hp != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.Hp))
		i--
		dAtA[i] = 0x20
	}
	if m.Finder != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.Finder))
		i--
		dAtA[i] = 0x18
	}
	if m.BossId != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x10
	}
	if m.BossUuid != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.BossUuid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DBHiddenBossFightHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBHiddenBossFightHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBHiddenBossFightHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DmgRate != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.DmgRate))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintDbGame(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DBBossDefeatHistoryNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBBossDefeatHistoryNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBBossDefeatHistoryNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.BossId != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DBBossDefeatHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBBossDefeatHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBBossDefeatHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BossDefeatHistory) > 0 {
		for k := range m.BossDefeatHistory {
			v := m.BossDefeatHistory[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDbGame(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintDbGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DBUserPVPDailyRewardsNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBUserPVPDailyRewardsNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBUserPVPDailyRewardsNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Rank != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DBUserPVPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBUserPVPInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBUserPVPInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RankRewards) > 0 {
		for k := range m.RankRewards {
			v := m.RankRewards[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDbGame(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDbGame(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.UpdateAt != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x10
	}
	if m.ChallengeCnt != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.ChallengeCnt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DBPVPHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBPVPHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBPVPHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.History) > 0 {
		for k := range m.History {
			v := m.History[k]
			baseI := i
			i = encodeVarintDbGame(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintDbGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DBBuffCardOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBBuffCardOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBBuffCardOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BuffCards) > 0 {
		dAtA4 := make([]byte, len(m.BuffCards)*10)
		var j3 int
		for _, num := range m.BuffCards {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintDbGame(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.BossId != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DBBuffCardsValid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBBuffCardsValid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBBuffCardsValid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BuffCards) > 0 {
		for iNdEx := len(m.BuffCards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuffCards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDbGame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DBBuffCardsValid_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBBuffCardsValid_Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBBuffCardsValid_Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeftRound != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.LeftRound))
		i--
		dAtA[i] = 0x10
	}
	if m.BuffCardId != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.BuffCardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDbGame(dAtA []byte, offset int, v uint64) int {
	offset -= sovDbGame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DBEnergy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Energy != 0 {
		n += 1 + sovDbGame(uint64(m.Energy))
	}
	if m.RecoverAt != 0 {
		n += 1 + sovDbGame(uint64(m.RecoverAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBFightHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WinTimes) > 0 {
		for k, v := range m.WinTimes {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDbGame(uint64(k)) + 1 + sovDbGame(uint64(v))
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBHiddenBossFindHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BossExpireAt) > 0 {
		for k, v := range m.BossExpireAt {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDbGame(uint64(k)) + 1 + sovDbGame(uint64(v))
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBHiddenBoss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BossUuid != 0 {
		n += 1 + sovDbGame(uint64(m.BossUuid))
	}
	if m.BossId != 0 {
		n += 1 + sovDbGame(uint64(m.BossId))
	}
	if m.Finder != 0 {
		n += 1 + sovDbGame(uint64(m.Finder))
	}
	if m.Hp != 0 {
		n += 1 + sovDbGame(uint64(m.Hp))
	}
	if m.ExpiredAt != 0 {
		n += 1 + sovDbGame(uint64(m.ExpiredAt))
	}
	if len(m.LastFightTime) > 0 {
		for k, v := range m.LastFightTime {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDbGame(uint64(k)) + 1 + sovDbGame(uint64(v))
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if len(m.Dmgs) > 0 {
		for k, v := range m.Dmgs {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDbGame(uint64(k)) + 1 + sovDbGame(uint64(v))
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if m.Killer != 0 {
		n += 1 + sovDbGame(uint64(m.Killer))
	}
	if len(m.FightHistories) > 0 {
		for _, e := range m.FightHistories {
			l = e.Size()
			n += 1 + l + sovDbGame(uint64(l))
		}
	}
	if len(m.AwardAddRates) > 0 {
		for k, v := range m.AwardAddRates {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDbGame(uint64(k)) + 1 + sovDbGame(uint64(v))
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBHiddenBossFightHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovDbGame(uint64(l))
	}
	if m.DmgRate != 0 {
		n += 1 + sovDbGame(uint64(m.DmgRate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBBossDefeatHistoryNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BossId != 0 {
		n += 1 + sovDbGame(uint64(m.BossId))
	}
	if m.Level != 0 {
		n += 1 + sovDbGame(uint64(m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBBossDefeatHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BossDefeatHistory) > 0 {
		for k, v := range m.BossDefeatHistory {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDbGame(uint64(l))
			}
			mapEntrySize := 1 + sovDbGame(uint64(k)) + l
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBUserPVPDailyRewardsNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovDbGame(uint64(m.Rank))
	}
	if m.Status != 0 {
		n += 1 + sovDbGame(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBUserPVPInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeCnt != 0 {
		n += 1 + sovDbGame(uint64(m.ChallengeCnt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovDbGame(uint64(m.UpdateAt))
	}
	if len(m.RankRewards) > 0 {
		for k, v := range m.RankRewards {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDbGame(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDbGame(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBPVPHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.History) > 0 {
		for k, v := range m.History {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDbGame(uint64(k)) + 1 + sovDbGame(uint64(v))
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBBuffCardOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BossId != 0 {
		n += 1 + sovDbGame(uint64(m.BossId))
	}
	if len(m.BuffCards) > 0 {
		l = 0
		for _, e := range m.BuffCards {
			l += sovDbGame(uint64(e))
		}
		n += 1 + sovDbGame(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBBuffCardsValid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuffCards) > 0 {
		for _, e := range m.BuffCards {
			l = e.Size()
			n += 1 + l + sovDbGame(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBBuffCardsValid_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuffCardId != 0 {
		n += 1 + sovDbGame(uint64(m.BuffCardId))
	}
	if m.LeftRound != 0 {
		n += 1 + sovDbGame(uint64(m.LeftRound))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDbGame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDbGame(x uint64) (n int) {
	return sovDbGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DBEnergy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBEnergy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBEnergy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverAt", wireType)
			}
			m.RecoverAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoverAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBFightHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBFightHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBFightHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WinTimes == nil {
				m.WinTimes = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WinTimes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBHiddenBossFindHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBHiddenBossFindHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBHiddenBossFindHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossExpireAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BossExpireAt == nil {
				m.BossExpireAt = make(map[uint64]int64)
			}
			var mapkey uint64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BossExpireAt[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBHiddenBoss) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBHiddenBoss: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBHiddenBoss: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossUuid", wireType)
			}
			m.BossUuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossUuid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finder", wireType)
			}
			m.Finder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Finder |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			m.ExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFightTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFightTime == nil {
				m.LastFightTime = make(map[uint64]int64)
			}
			var mapkey uint64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LastFightTime[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dmgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dmgs == nil {
				m.Dmgs = make(map[uint64]uint64)
			}
			var mapkey uint64
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Dmgs[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killer", wireType)
			}
			m.Killer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Killer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightHistories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FightHistories = append(m.FightHistories, &DBHiddenBossFightHistory{})
			if err := m.FightHistories[len(m.FightHistories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardAddRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwardAddRates == nil {
				m.AwardAddRates = make(map[uint64]uint64)
			}
			var mapkey uint64
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AwardAddRates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBHiddenBossFightHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBHiddenBossFightHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBHiddenBossFightHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DmgRate", wireType)
			}
			m.DmgRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DmgRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBBossDefeatHistoryNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBBossDefeatHistoryNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBBossDefeatHistoryNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBBossDefeatHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBBossDefeatHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBBossDefeatHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossDefeatHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BossDefeatHistory == nil {
				m.BossDefeatHistory = make(map[uint32]*DBBossDefeatHistoryNode)
			}
			var mapkey uint32
			var mapvalue *DBBossDefeatHistoryNode
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDbGame
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDbGame
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DBBossDefeatHistoryNode{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BossDefeatHistory[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBUserPVPDailyRewardsNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBUserPVPDailyRewardsNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBUserPVPDailyRewardsNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBUserPVPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBUserPVPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBUserPVPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeCnt", wireType)
			}
			m.ChallengeCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RankRewards == nil {
				m.RankRewards = make(map[string]*DBUserPVPDailyRewardsNode)
			}
			var mapkey string
			var mapvalue *DBUserPVPDailyRewardsNode
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDbGame
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDbGame
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDbGame
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDbGame
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DBUserPVPDailyRewardsNode{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RankRewards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBPVPHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBPVPHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBPVPHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = make(map[uint32]uint64)
			}
			var mapkey uint32
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.History[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBBuffCardOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBBuffCardOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBBuffCardOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BuffCards = append(m.BuffCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDbGame
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDbGame
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BuffCards) == 0 {
					m.BuffCards = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BuffCards = append(m.BuffCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffCards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBBuffCardsValid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBBuffCardsValid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBBuffCardsValid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuffCards = append(m.BuffCards, &DBBuffCardsValid_Node{})
			if err := m.BuffCards[len(m.BuffCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBBuffCardsValid_Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffCardId", wireType)
			}
			m.BuffCardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffCardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftRound", wireType)
			}
			m.LeftRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftRound |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDbGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDbGame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDbGame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDbGame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDbGame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDbGame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDbGame = fmt.Errorf("proto: unexpected end of group")
)
