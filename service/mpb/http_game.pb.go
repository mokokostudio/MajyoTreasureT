// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.3
// source: http_game.proto

package mpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// game
type CReqFight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId   uint32 `protobuf:"varint,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	BossUuid uint64 `protobuf:"varint,2,opt,name=boss_uuid,json=bossUuid,proto3" json:"boss_uuid,omitempty"`
}

func (x *CReqFight) Reset() {
	*x = CReqFight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqFight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqFight) ProtoMessage() {}

func (x *CReqFight) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqFight.ProtoReflect.Descriptor instead.
func (*CReqFight) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{0}
}

func (x *CReqFight) GetBossId() uint32 {
	if x != nil {
		return x.BossId
	}
	return 0
}

func (x *CReqFight) GetBossUuid() uint64 {
	if x != nil {
		return x.BossUuid
	}
	return 0
}

type CResFight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Win             bool                 `protobuf:"varint,1,opt,name=win,proto3" json:"win,omitempty"`
	BossDie         bool                 `protobuf:"varint,2,opt,name=boss_die,json=bossDie,proto3" json:"boss_die,omitempty"`
	Details         []*FightDetail       `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	Awards          *CAwards             `protobuf:"bytes,4,opt,name=awards,proto3" json:"awards,omitempty"`
	EnergyCost      uint32               `protobuf:"varint,5,opt,name=energy_cost,json=energyCost,proto3" json:"energy_cost,omitempty"`
	Energy          uint32               `protobuf:"varint,6,opt,name=energy,proto3" json:"energy,omitempty"`
	EnergyRecoverAt int64                `protobuf:"varint,7,opt,name=energy_recover_at,json=energyRecoverAt,proto3" json:"energy_recover_at,omitempty"`
	Dmg             uint64               `protobuf:"varint,8,opt,name=dmg,proto3" json:"dmg,omitempty"`
	DmgRate         uint64               `protobuf:"varint,9,opt,name=dmg_rate,json=dmgRate,proto3" json:"dmg_rate,omitempty"`
	HiddenBoss      *HiddenBoss          `protobuf:"bytes,10,opt,name=hidden_boss,json=hiddenBoss,proto3" json:"hidden_boss,omitempty"`
	BossHp          uint64               `protobuf:"varint,11,opt,name=boss_hp,json=bossHp,proto3" json:"boss_hp,omitempty"`
	PlayerHp        uint64               `protobuf:"varint,12,opt,name=player_hp,json=playerHp,proto3" json:"player_hp,omitempty"`
	BuffCards       []*BuffCard          `protobuf:"bytes,13,rep,name=buff_cards,json=buffCards,proto3" json:"buff_cards,omitempty"`
	BuffCardStatus  EGame_BuffCardStatus `protobuf:"varint,14,opt,name=buff_card_status,json=buffCardStatus,proto3,enum=mpb.EGame_BuffCardStatus" json:"buff_card_status,omitempty"`
}

func (x *CResFight) Reset() {
	*x = CResFight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResFight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResFight) ProtoMessage() {}

func (x *CResFight) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResFight.ProtoReflect.Descriptor instead.
func (*CResFight) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{1}
}

func (x *CResFight) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

func (x *CResFight) GetBossDie() bool {
	if x != nil {
		return x.BossDie
	}
	return false
}

func (x *CResFight) GetDetails() []*FightDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *CResFight) GetAwards() *CAwards {
	if x != nil {
		return x.Awards
	}
	return nil
}

func (x *CResFight) GetEnergyCost() uint32 {
	if x != nil {
		return x.EnergyCost
	}
	return 0
}

func (x *CResFight) GetEnergy() uint32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *CResFight) GetEnergyRecoverAt() int64 {
	if x != nil {
		return x.EnergyRecoverAt
	}
	return 0
}

func (x *CResFight) GetDmg() uint64 {
	if x != nil {
		return x.Dmg
	}
	return 0
}

func (x *CResFight) GetDmgRate() uint64 {
	if x != nil {
		return x.DmgRate
	}
	return 0
}

func (x *CResFight) GetHiddenBoss() *HiddenBoss {
	if x != nil {
		return x.HiddenBoss
	}
	return nil
}

func (x *CResFight) GetBossHp() uint64 {
	if x != nil {
		return x.BossHp
	}
	return 0
}

func (x *CResFight) GetPlayerHp() uint64 {
	if x != nil {
		return x.PlayerHp
	}
	return 0
}

func (x *CResFight) GetBuffCards() []*BuffCard {
	if x != nil {
		return x.BuffCards
	}
	return nil
}

func (x *CResFight) GetBuffCardStatus() EGame_BuffCardStatus {
	if x != nil {
		return x.BuffCardStatus
	}
	return EGame_BuffCardStatus_None
}

type CResGetEnergy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Energy   uint32 `protobuf:"varint,1,opt,name=energy,proto3" json:"energy,omitempty"`
	UpdateAt int64  `protobuf:"varint,2,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *CResGetEnergy) Reset() {
	*x = CResGetEnergy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResGetEnergy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResGetEnergy) ProtoMessage() {}

func (x *CResGetEnergy) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResGetEnergy.ProtoReflect.Descriptor instead.
func (*CResGetEnergy) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{2}
}

func (x *CResGetEnergy) GetEnergy() uint32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *CResGetEnergy) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

type CReqGetHiddenBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossUuid uint64 `protobuf:"varint,1,opt,name=boss_uuid,json=bossUuid,proto3" json:"boss_uuid,omitempty"`
}

func (x *CReqGetHiddenBoss) Reset() {
	*x = CReqGetHiddenBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqGetHiddenBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqGetHiddenBoss) ProtoMessage() {}

func (x *CReqGetHiddenBoss) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqGetHiddenBoss.ProtoReflect.Descriptor instead.
func (*CReqGetHiddenBoss) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{3}
}

func (x *CReqGetHiddenBoss) GetBossUuid() uint64 {
	if x != nil {
		return x.BossUuid
	}
	return 0
}

type CResGetHiddenBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiddenBoss *HiddenBoss `protobuf:"bytes,1,opt,name=hidden_boss,json=hiddenBoss,proto3" json:"hidden_boss,omitempty"`
	Fought     bool        `protobuf:"varint,2,opt,name=fought,proto3" json:"fought,omitempty"`
	FightCd    int64       `protobuf:"varint,3,opt,name=fight_cd,json=fightCd,proto3" json:"fight_cd,omitempty"`
}

func (x *CResGetHiddenBoss) Reset() {
	*x = CResGetHiddenBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResGetHiddenBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResGetHiddenBoss) ProtoMessage() {}

func (x *CResGetHiddenBoss) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResGetHiddenBoss.ProtoReflect.Descriptor instead.
func (*CResGetHiddenBoss) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{4}
}

func (x *CResGetHiddenBoss) GetHiddenBoss() *HiddenBoss {
	if x != nil {
		return x.HiddenBoss
	}
	return nil
}

func (x *CResGetHiddenBoss) GetFought() bool {
	if x != nil {
		return x.Fought
	}
	return false
}

func (x *CResGetHiddenBoss) GetFightCd() int64 {
	if x != nil {
		return x.FightCd
	}
	return 0
}

type CReqNewHiddenBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tguser uint64 `protobuf:"varint,1,opt,name=tguser,proto3" json:"tguser,omitempty"`
	BossId uint32 `protobuf:"varint,2,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
}

func (x *CReqNewHiddenBoss) Reset() {
	*x = CReqNewHiddenBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqNewHiddenBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqNewHiddenBoss) ProtoMessage() {}

func (x *CReqNewHiddenBoss) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqNewHiddenBoss.ProtoReflect.Descriptor instead.
func (*CReqNewHiddenBoss) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{5}
}

func (x *CReqNewHiddenBoss) GetTguser() uint64 {
	if x != nil {
		return x.Tguser
	}
	return 0
}

func (x *CReqNewHiddenBoss) GetBossId() uint32 {
	if x != nil {
		return x.BossId
	}
	return 0
}

type CResNewHiddenBoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiddenBoss *HiddenBoss `protobuf:"bytes,1,opt,name=hidden_boss,json=hiddenBoss,proto3" json:"hidden_boss,omitempty"`
}

func (x *CResNewHiddenBoss) Reset() {
	*x = CResNewHiddenBoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResNewHiddenBoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResNewHiddenBoss) ProtoMessage() {}

func (x *CResNewHiddenBoss) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResNewHiddenBoss.ProtoReflect.Descriptor instead.
func (*CResNewHiddenBoss) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{6}
}

func (x *CResNewHiddenBoss) GetHiddenBoss() *HiddenBoss {
	if x != nil {
		return x.HiddenBoss
	}
	return nil
}

type CReqFightPVP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId   uint64 `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetRank uint32 `protobuf:"varint,2,opt,name=target_rank,json=targetRank,proto3" json:"target_rank,omitempty"`
}

func (x *CReqFightPVP) Reset() {
	*x = CReqFightPVP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqFightPVP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqFightPVP) ProtoMessage() {}

func (x *CReqFightPVP) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqFightPVP.ProtoReflect.Descriptor instead.
func (*CReqFightPVP) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{7}
}

func (x *CReqFightPVP) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *CReqFightPVP) GetTargetRank() uint32 {
	if x != nil {
		return x.TargetRank
	}
	return 0
}

type CResFightPVP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Win                     bool           `protobuf:"varint,1,opt,name=win,proto3" json:"win,omitempty"`
	OldRank                 uint32         `protobuf:"varint,2,opt,name=old_rank,json=oldRank,proto3" json:"old_rank,omitempty"`
	NewRank                 uint32         `protobuf:"varint,3,opt,name=new_rank,json=newRank,proto3" json:"new_rank,omitempty"`
	ChallengerHp            uint64         `protobuf:"varint,4,opt,name=challenger_hp,json=challengerHp,proto3" json:"challenger_hp,omitempty"`
	DefenderHp              uint64         `protobuf:"varint,5,opt,name=defender_hp,json=defenderHp,proto3" json:"defender_hp,omitempty"`
	Details                 []*FightDetail `protobuf:"bytes,6,rep,name=details,proto3" json:"details,omitempty"`
	PvpChallengeCnt         uint32         `protobuf:"varint,7,opt,name=pvp_challenge_cnt,json=pvpChallengeCnt,proto3" json:"pvp_challenge_cnt,omitempty"`
	PvpChallengeCntUpdateAt int64          `protobuf:"varint,8,opt,name=pvp_challenge_cnt_update_at,json=pvpChallengeCntUpdateAt,proto3" json:"pvp_challenge_cnt_update_at,omitempty"`
	Mana                    uint64         `protobuf:"varint,9,opt,name=mana,proto3" json:"mana,omitempty"`
}

func (x *CResFightPVP) Reset() {
	*x = CResFightPVP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResFightPVP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResFightPVP) ProtoMessage() {}

func (x *CResFightPVP) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResFightPVP.ProtoReflect.Descriptor instead.
func (*CResFightPVP) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{8}
}

func (x *CResFightPVP) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

func (x *CResFightPVP) GetOldRank() uint32 {
	if x != nil {
		return x.OldRank
	}
	return 0
}

func (x *CResFightPVP) GetNewRank() uint32 {
	if x != nil {
		return x.NewRank
	}
	return 0
}

func (x *CResFightPVP) GetChallengerHp() uint64 {
	if x != nil {
		return x.ChallengerHp
	}
	return 0
}

func (x *CResFightPVP) GetDefenderHp() uint64 {
	if x != nil {
		return x.DefenderHp
	}
	return 0
}

func (x *CResFightPVP) GetDetails() []*FightDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *CResFightPVP) GetPvpChallengeCnt() uint32 {
	if x != nil {
		return x.PvpChallengeCnt
	}
	return 0
}

func (x *CResFightPVP) GetPvpChallengeCntUpdateAt() int64 {
	if x != nil {
		return x.PvpChallengeCntUpdateAt
	}
	return 0
}

func (x *CResFightPVP) GetMana() uint64 {
	if x != nil {
		return x.Mana
	}
	return 0
}

type CResGetPVPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                  uint32              `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	ChallengerCnt         uint32              `protobuf:"varint,2,opt,name=challenger_cnt,json=challengerCnt,proto3" json:"challenger_cnt,omitempty"`
	ChallengerCntUpdateAt int64               `protobuf:"varint,3,opt,name=challenger_cnt_update_at,json=challengerCntUpdateAt,proto3" json:"challenger_cnt_update_at,omitempty"`
	PvpSettleRewards      []*PVPSettleRewards `protobuf:"bytes,4,rep,name=pvp_settle_rewards,json=pvpSettleRewards,proto3" json:"pvp_settle_rewards,omitempty"`
	PvpSeasonDate         uint32              `protobuf:"varint,5,opt,name=pvp_season_date,json=pvpSeasonDate,proto3" json:"pvp_season_date,omitempty"` // 20240101
	PvpManaAwardsPool     uint64              `protobuf:"varint,6,opt,name=pvp_mana_awards_pool,json=pvpManaAwardsPool,proto3" json:"pvp_mana_awards_pool,omitempty"`
}

func (x *CResGetPVPInfo) Reset() {
	*x = CResGetPVPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResGetPVPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResGetPVPInfo) ProtoMessage() {}

func (x *CResGetPVPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResGetPVPInfo.ProtoReflect.Descriptor instead.
func (*CResGetPVPInfo) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{9}
}

func (x *CResGetPVPInfo) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *CResGetPVPInfo) GetChallengerCnt() uint32 {
	if x != nil {
		return x.ChallengerCnt
	}
	return 0
}

func (x *CResGetPVPInfo) GetChallengerCntUpdateAt() int64 {
	if x != nil {
		return x.ChallengerCntUpdateAt
	}
	return 0
}

func (x *CResGetPVPInfo) GetPvpSettleRewards() []*PVPSettleRewards {
	if x != nil {
		return x.PvpSettleRewards
	}
	return nil
}

func (x *CResGetPVPInfo) GetPvpSeasonDate() uint32 {
	if x != nil {
		return x.PvpSeasonDate
	}
	return 0
}

func (x *CResGetPVPInfo) GetPvpManaAwardsPool() uint64 {
	if x != nil {
		return x.PvpManaAwardsPool
	}
	return 0
}

type CReqGetPVPRanks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum uint32 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
}

func (x *CReqGetPVPRanks) Reset() {
	*x = CReqGetPVPRanks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqGetPVPRanks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqGetPVPRanks) ProtoMessage() {}

func (x *CReqGetPVPRanks) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqGetPVPRanks.ProtoReflect.Descriptor instead.
func (*CReqGetPVPRanks) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{10}
}

func (x *CReqGetPVPRanks) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type CResGetPVPRanks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  uint32         `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	RankList []*PVPRankNode `protobuf:"bytes,2,rep,name=rank_list,json=rankList,proto3" json:"rank_list,omitempty"`
}

func (x *CResGetPVPRanks) Reset() {
	*x = CResGetPVPRanks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResGetPVPRanks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResGetPVPRanks) ProtoMessage() {}

func (x *CResGetPVPRanks) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResGetPVPRanks.ProtoReflect.Descriptor instead.
func (*CResGetPVPRanks) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{11}
}

func (x *CResGetPVPRanks) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *CResGetPVPRanks) GetRankList() []*PVPRankNode {
	if x != nil {
		return x.RankList
	}
	return nil
}

type CResGetPVPChallengeTargets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetList []*PVPRankNode `protobuf:"bytes,1,rep,name=target_list,json=targetList,proto3" json:"target_list,omitempty"`
}

func (x *CResGetPVPChallengeTargets) Reset() {
	*x = CResGetPVPChallengeTargets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResGetPVPChallengeTargets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResGetPVPChallengeTargets) ProtoMessage() {}

func (x *CResGetPVPChallengeTargets) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResGetPVPChallengeTargets.ProtoReflect.Descriptor instead.
func (*CResGetPVPChallengeTargets) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{12}
}

func (x *CResGetPVPChallengeTargets) GetTargetList() []*PVPRankNode {
	if x != nil {
		return x.TargetList
	}
	return nil
}

type CResGetPVPHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PVPHistory `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CResGetPVPHistory) Reset() {
	*x = CResGetPVPHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResGetPVPHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResGetPVPHistory) ProtoMessage() {}

func (x *CResGetPVPHistory) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResGetPVPHistory.ProtoReflect.Descriptor instead.
func (*CResGetPVPHistory) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{13}
}

func (x *CResGetPVPHistory) GetList() []*PVPHistory {
	if x != nil {
		return x.List
	}
	return nil
}

type CReqRandomBuffCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId uint32 `protobuf:"varint,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
}

func (x *CReqRandomBuffCards) Reset() {
	*x = CReqRandomBuffCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqRandomBuffCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqRandomBuffCards) ProtoMessage() {}

func (x *CReqRandomBuffCards) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqRandomBuffCards.ProtoReflect.Descriptor instead.
func (*CReqRandomBuffCards) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{14}
}

func (x *CReqRandomBuffCards) GetBossId() uint32 {
	if x != nil {
		return x.BossId
	}
	return 0
}

type CResRandomBuffCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossId    uint32   `protobuf:"varint,1,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	BuffCards []uint32 `protobuf:"varint,2,rep,packed,name=buff_cards,json=buffCards,proto3" json:"buff_cards,omitempty"`
}

func (x *CResRandomBuffCards) Reset() {
	*x = CResRandomBuffCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResRandomBuffCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResRandomBuffCards) ProtoMessage() {}

func (x *CResRandomBuffCards) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResRandomBuffCards.ProtoReflect.Descriptor instead.
func (*CResRandomBuffCards) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{15}
}

func (x *CResRandomBuffCards) GetBossId() uint32 {
	if x != nil {
		return x.BossId
	}
	return 0
}

func (x *CResRandomBuffCards) GetBuffCards() []uint32 {
	if x != nil {
		return x.BuffCards
	}
	return nil
}

type CReqChoseBuffCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffCard uint32 `protobuf:"varint,1,opt,name=buff_card,json=buffCard,proto3" json:"buff_card,omitempty"`
}

func (x *CReqChoseBuffCard) Reset() {
	*x = CReqChoseBuffCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CReqChoseBuffCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CReqChoseBuffCard) ProtoMessage() {}

func (x *CReqChoseBuffCard) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CReqChoseBuffCard.ProtoReflect.Descriptor instead.
func (*CReqChoseBuffCard) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{16}
}

func (x *CReqChoseBuffCard) GetBuffCard() uint32 {
	if x != nil {
		return x.BuffCard
	}
	return 0
}

type CResChoseBuffCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuffCards []uint32 `protobuf:"varint,1,rep,packed,name=buff_cards,json=buffCards,proto3" json:"buff_cards,omitempty"`
}

func (x *CResChoseBuffCard) Reset() {
	*x = CResChoseBuffCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_http_game_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CResChoseBuffCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CResChoseBuffCard) ProtoMessage() {}

func (x *CResChoseBuffCard) ProtoReflect() protoreflect.Message {
	mi := &file_http_game_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CResChoseBuffCard.ProtoReflect.Descriptor instead.
func (*CResChoseBuffCard) Descriptor() ([]byte, []int) {
	return file_http_game_proto_rawDescGZIP(), []int{17}
}

func (x *CResChoseBuffCard) GetBuffCards() []uint32 {
	if x != nil {
		return x.BuffCards
	}
	return nil
}

var File_http_game_proto protoreflect.FileDescriptor

var file_http_game_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x6d, 0x70, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x09, 0x43, 0x52, 0x65, 0x71, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f,
	0x73, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62,
	0x6f, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64, 0x22, 0xf7, 0x03, 0x0a, 0x09, 0x43, 0x52, 0x65, 0x73,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x5f,
	0x64, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6f, 0x73, 0x73, 0x44,
	0x69, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24,
	0x0a, 0x06, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x43, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x06, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6d, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x6d, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x6d, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64,
	0x6d, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x70,
	0x62, 0x2e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x0a, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x73, 0x73,
	0x5f, 0x68, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x48,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x68, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x70, 0x12, 0x2c,
	0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x10,
	0x62, 0x75, 0x66, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x45, 0x47, 0x61,
	0x6d, 0x65, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x44, 0x0a, 0x0d, 0x43, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x30, 0x0a, 0x11, 0x43, 0x52, 0x65, 0x71, 0x47,
	0x65, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x6f, 0x73, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x62, 0x6f, 0x73, 0x73, 0x55, 0x75, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x11, 0x43, 0x52, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x30,
	0x0a, 0x0b, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x42, 0x6f, 0x73, 0x73, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x66, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x63, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x64, 0x22, 0x44, 0x0a, 0x11, 0x43, 0x52, 0x65, 0x71, 0x4e, 0x65, 0x77, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x67, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x67, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x11, 0x43, 0x52, 0x65,
	0x73, 0x4e, 0x65, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x30,
	0x0a, 0x0b, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x42, 0x6f, 0x73, 0x73, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x6f, 0x73, 0x73,
	0x22, 0x4c, 0x0a, 0x0c, 0x43, 0x52, 0x65, 0x71, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x56, 0x50,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0xc6,
	0x02, 0x0a, 0x0c, 0x43, 0x52, 0x65, 0x73, 0x46, 0x69, 0x67, 0x68, 0x74, 0x50, 0x56, 0x50, 0x12,
	0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x68, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x48, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x70, 0x12, 0x2a, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x76, 0x70,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x76, 0x70, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x70, 0x76, 0x70, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x70, 0x76, 0x70, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x6d, 0x61, 0x6e, 0x61, 0x22, 0xa2, 0x02, 0x0a, 0x0e, 0x43, 0x52, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x50, 0x56, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x43, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x43,
	0x0a, 0x12, 0x70, 0x76, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x70, 0x62,
	0x2e, 0x50, 0x56, 0x50, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x10, 0x70, 0x76, 0x70, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x76, 0x70, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x76,
	0x70, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x70,
	0x76, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x76, 0x70, 0x4d, 0x61,
	0x6e, 0x61, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0x2c, 0x0a, 0x0f,
	0x43, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x50, 0x56, 0x50, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x5b, 0x0a, 0x0f, 0x43, 0x52,
	0x65, 0x73, 0x47, 0x65, 0x74, 0x50, 0x56, 0x50, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70,
	0x62, 0x2e, 0x50, 0x56, 0x50, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72,
	0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x1a, 0x43, 0x52, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x50, 0x56, 0x50, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70, 0x62,
	0x2e, 0x50, 0x56, 0x50, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x11, 0x43, 0x52, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x50, 0x56, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x70,
	0x62, 0x2e, 0x50, 0x56, 0x50, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x2e, 0x0a, 0x13, 0x43, 0x52, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x43, 0x52, 0x65, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x30, 0x0a, 0x11, 0x43, 0x52, 0x65, 0x71, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x43,
	0x61, 0x72, 0x64, 0x22, 0x32, 0x0a, 0x11, 0x43, 0x52, 0x65, 0x73, 0x43, 0x68, 0x6f, 0x73, 0x65,
	0x42, 0x75, 0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x66, 0x66,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x75,
	0x66, 0x66, 0x43, 0x61, 0x72, 0x64, 0x73, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6d, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_http_game_proto_rawDescOnce sync.Once
	file_http_game_proto_rawDescData = file_http_game_proto_rawDesc
)

func file_http_game_proto_rawDescGZIP() []byte {
	file_http_game_proto_rawDescOnce.Do(func() {
		file_http_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_http_game_proto_rawDescData)
	})
	return file_http_game_proto_rawDescData
}

var file_http_game_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_http_game_proto_goTypes = []interface{}{
	(*CReqFight)(nil),                  // 0: mpb.CReqFight
	(*CResFight)(nil),                  // 1: mpb.CResFight
	(*CResGetEnergy)(nil),              // 2: mpb.CResGetEnergy
	(*CReqGetHiddenBoss)(nil),          // 3: mpb.CReqGetHiddenBoss
	(*CResGetHiddenBoss)(nil),          // 4: mpb.CResGetHiddenBoss
	(*CReqNewHiddenBoss)(nil),          // 5: mpb.CReqNewHiddenBoss
	(*CResNewHiddenBoss)(nil),          // 6: mpb.CResNewHiddenBoss
	(*CReqFightPVP)(nil),               // 7: mpb.CReqFightPVP
	(*CResFightPVP)(nil),               // 8: mpb.CResFightPVP
	(*CResGetPVPInfo)(nil),             // 9: mpb.CResGetPVPInfo
	(*CReqGetPVPRanks)(nil),            // 10: mpb.CReqGetPVPRanks
	(*CResGetPVPRanks)(nil),            // 11: mpb.CResGetPVPRanks
	(*CResGetPVPChallengeTargets)(nil), // 12: mpb.CResGetPVPChallengeTargets
	(*CResGetPVPHistory)(nil),          // 13: mpb.CResGetPVPHistory
	(*CReqRandomBuffCards)(nil),        // 14: mpb.CReqRandomBuffCards
	(*CResRandomBuffCards)(nil),        // 15: mpb.CResRandomBuffCards
	(*CReqChoseBuffCard)(nil),          // 16: mpb.CReqChoseBuffCard
	(*CResChoseBuffCard)(nil),          // 17: mpb.CResChoseBuffCard
	(*FightDetail)(nil),                // 18: mpb.FightDetail
	(*CAwards)(nil),                    // 19: mpb.CAwards
	(*HiddenBoss)(nil),                 // 20: mpb.HiddenBoss
	(*BuffCard)(nil),                   // 21: mpb.BuffCard
	(EGame_BuffCardStatus)(0),          // 22: mpb.EGame.BuffCardStatus
	(*PVPSettleRewards)(nil),           // 23: mpb.PVPSettleRewards
	(*PVPRankNode)(nil),                // 24: mpb.PVPRankNode
	(*PVPHistory)(nil),                 // 25: mpb.PVPHistory
}
var file_http_game_proto_depIdxs = []int32{
	18, // 0: mpb.CResFight.details:type_name -> mpb.FightDetail
	19, // 1: mpb.CResFight.awards:type_name -> mpb.CAwards
	20, // 2: mpb.CResFight.hidden_boss:type_name -> mpb.HiddenBoss
	21, // 3: mpb.CResFight.buff_cards:type_name -> mpb.BuffCard
	22, // 4: mpb.CResFight.buff_card_status:type_name -> mpb.EGame.BuffCardStatus
	20, // 5: mpb.CResGetHiddenBoss.hidden_boss:type_name -> mpb.HiddenBoss
	20, // 6: mpb.CResNewHiddenBoss.hidden_boss:type_name -> mpb.HiddenBoss
	18, // 7: mpb.CResFightPVP.details:type_name -> mpb.FightDetail
	23, // 8: mpb.CResGetPVPInfo.pvp_settle_rewards:type_name -> mpb.PVPSettleRewards
	24, // 9: mpb.CResGetPVPRanks.rank_list:type_name -> mpb.PVPRankNode
	24, // 10: mpb.CResGetPVPChallengeTargets.target_list:type_name -> mpb.PVPRankNode
	25, // 11: mpb.CResGetPVPHistory.list:type_name -> mpb.PVPHistory
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_http_game_proto_init() }
func file_http_game_proto_init() {
	if File_http_game_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_http_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqFight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResFight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResGetEnergy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqGetHiddenBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResGetHiddenBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqNewHiddenBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResNewHiddenBoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqFightPVP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResFightPVP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResGetPVPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqGetPVPRanks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResGetPVPRanks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResGetPVPChallengeTargets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResGetPVPHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqRandomBuffCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResRandomBuffCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CReqChoseBuffCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_http_game_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CResChoseBuffCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_http_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_http_game_proto_goTypes,
		DependencyIndexes: file_http_game_proto_depIdxs,
		MessageInfos:      file_http_game_proto_msgTypes,
	}.Build()
	File_http_game_proto = out.File
	file_http_game_proto_rawDesc = nil
	file_http_game_proto_goTypes = nil
	file_http_game_proto_depIdxs = nil
}
