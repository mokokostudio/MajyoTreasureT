// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: grpc_market.proto

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MarketService_GetGoodsOrdersOnSell_FullMethodName    = "/mpb.MarketService/GetGoodsOrdersOnSell"
	MarketService_GetMyGoodsOrdersOnSell_FullMethodName  = "/mpb.MarketService/GetMyGoodsOrdersOnSell"
	MarketService_PublishGoodsOrder_FullMethodName       = "/mpb.MarketService/PublishGoodsOrder"
	MarketService_PurchaseGoodsOrder_FullMethodName      = "/mpb.MarketService/PurchaseGoodsOrder"
	MarketService_TakeOffGoodsOrder_FullMethodName       = "/mpb.MarketService/TakeOffGoodsOrder"
	MarketService_AdminFreezeAccountTrade_FullMethodName = "/mpb.MarketService/AdminFreezeAccountTrade"
)

// MarketServiceClient is the client API for MarketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketServiceClient interface {
	GetGoodsOrdersOnSell(ctx context.Context, in *ReqGetGoodsOrdersOnSell, opts ...grpc.CallOption) (*ResGetGoodsOrdersOnSell, error)
	GetMyGoodsOrdersOnSell(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResGetMyGoodsOrdersOnSell, error)
	PublishGoodsOrder(ctx context.Context, in *ReqPublishGoodsOrder, opts ...grpc.CallOption) (*Empty, error)
	PurchaseGoodsOrder(ctx context.Context, in *ReqPurchaseGoodsOrder, opts ...grpc.CallOption) (*ResPurchaseGoodsOrder, error)
	TakeOffGoodsOrder(ctx context.Context, in *ReqTakeOffGoodsOrder, opts ...grpc.CallOption) (*ResTakeOffGoodsOrder, error)
	AdminFreezeAccountTrade(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*Empty, error)
}

type marketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketServiceClient(cc grpc.ClientConnInterface) MarketServiceClient {
	return &marketServiceClient{cc}
}

func (c *marketServiceClient) GetGoodsOrdersOnSell(ctx context.Context, in *ReqGetGoodsOrdersOnSell, opts ...grpc.CallOption) (*ResGetGoodsOrdersOnSell, error) {
	out := new(ResGetGoodsOrdersOnSell)
	err := c.cc.Invoke(ctx, MarketService_GetGoodsOrdersOnSell_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) GetMyGoodsOrdersOnSell(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResGetMyGoodsOrdersOnSell, error) {
	out := new(ResGetMyGoodsOrdersOnSell)
	err := c.cc.Invoke(ctx, MarketService_GetMyGoodsOrdersOnSell_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) PublishGoodsOrder(ctx context.Context, in *ReqPublishGoodsOrder, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MarketService_PublishGoodsOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) PurchaseGoodsOrder(ctx context.Context, in *ReqPurchaseGoodsOrder, opts ...grpc.CallOption) (*ResPurchaseGoodsOrder, error) {
	out := new(ResPurchaseGoodsOrder)
	err := c.cc.Invoke(ctx, MarketService_PurchaseGoodsOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) TakeOffGoodsOrder(ctx context.Context, in *ReqTakeOffGoodsOrder, opts ...grpc.CallOption) (*ResTakeOffGoodsOrder, error) {
	out := new(ResTakeOffGoodsOrder)
	err := c.cc.Invoke(ctx, MarketService_TakeOffGoodsOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) AdminFreezeAccountTrade(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, MarketService_AdminFreezeAccountTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServiceServer is the server API for MarketService service.
// All implementations must embed UnimplementedMarketServiceServer
// for forward compatibility
type MarketServiceServer interface {
	GetGoodsOrdersOnSell(context.Context, *ReqGetGoodsOrdersOnSell) (*ResGetGoodsOrdersOnSell, error)
	GetMyGoodsOrdersOnSell(context.Context, *ReqUserId) (*ResGetMyGoodsOrdersOnSell, error)
	PublishGoodsOrder(context.Context, *ReqPublishGoodsOrder) (*Empty, error)
	PurchaseGoodsOrder(context.Context, *ReqPurchaseGoodsOrder) (*ResPurchaseGoodsOrder, error)
	TakeOffGoodsOrder(context.Context, *ReqTakeOffGoodsOrder) (*ResTakeOffGoodsOrder, error)
	AdminFreezeAccountTrade(context.Context, *ReqUserId) (*Empty, error)
	mustEmbedUnimplementedMarketServiceServer()
}

// UnimplementedMarketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServiceServer struct {
}

func (UnimplementedMarketServiceServer) GetGoodsOrdersOnSell(context.Context, *ReqGetGoodsOrdersOnSell) (*ResGetGoodsOrdersOnSell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsOrdersOnSell not implemented")
}
func (UnimplementedMarketServiceServer) GetMyGoodsOrdersOnSell(context.Context, *ReqUserId) (*ResGetMyGoodsOrdersOnSell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyGoodsOrdersOnSell not implemented")
}
func (UnimplementedMarketServiceServer) PublishGoodsOrder(context.Context, *ReqPublishGoodsOrder) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishGoodsOrder not implemented")
}
func (UnimplementedMarketServiceServer) PurchaseGoodsOrder(context.Context, *ReqPurchaseGoodsOrder) (*ResPurchaseGoodsOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseGoodsOrder not implemented")
}
func (UnimplementedMarketServiceServer) TakeOffGoodsOrder(context.Context, *ReqTakeOffGoodsOrder) (*ResTakeOffGoodsOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeOffGoodsOrder not implemented")
}
func (UnimplementedMarketServiceServer) AdminFreezeAccountTrade(context.Context, *ReqUserId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminFreezeAccountTrade not implemented")
}
func (UnimplementedMarketServiceServer) mustEmbedUnimplementedMarketServiceServer() {}

// UnsafeMarketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServiceServer will
// result in compilation errors.
type UnsafeMarketServiceServer interface {
	mustEmbedUnimplementedMarketServiceServer()
}

func RegisterMarketServiceServer(s grpc.ServiceRegistrar, srv MarketServiceServer) {
	s.RegisterService(&MarketService_ServiceDesc, srv)
}

func _MarketService_GetGoodsOrdersOnSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetGoodsOrdersOnSell)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).GetGoodsOrdersOnSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_GetGoodsOrdersOnSell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).GetGoodsOrdersOnSell(ctx, req.(*ReqGetGoodsOrdersOnSell))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_GetMyGoodsOrdersOnSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).GetMyGoodsOrdersOnSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_GetMyGoodsOrdersOnSell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).GetMyGoodsOrdersOnSell(ctx, req.(*ReqUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_PublishGoodsOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPublishGoodsOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).PublishGoodsOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_PublishGoodsOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).PublishGoodsOrder(ctx, req.(*ReqPublishGoodsOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_PurchaseGoodsOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPurchaseGoodsOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).PurchaseGoodsOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_PurchaseGoodsOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).PurchaseGoodsOrder(ctx, req.(*ReqPurchaseGoodsOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_TakeOffGoodsOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTakeOffGoodsOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).TakeOffGoodsOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_TakeOffGoodsOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).TakeOffGoodsOrder(ctx, req.(*ReqTakeOffGoodsOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_AdminFreezeAccountTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).AdminFreezeAccountTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketService_AdminFreezeAccountTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).AdminFreezeAccountTrade(ctx, req.(*ReqUserId))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketService_ServiceDesc is the grpc.ServiceDesc for MarketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpb.MarketService",
	HandlerType: (*MarketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoodsOrdersOnSell",
			Handler:    _MarketService_GetGoodsOrdersOnSell_Handler,
		},
		{
			MethodName: "GetMyGoodsOrdersOnSell",
			Handler:    _MarketService_GetMyGoodsOrdersOnSell_Handler,
		},
		{
			MethodName: "PublishGoodsOrder",
			Handler:    _MarketService_PublishGoodsOrder_Handler,
		},
		{
			MethodName: "PurchaseGoodsOrder",
			Handler:    _MarketService_PurchaseGoodsOrder_Handler,
		},
		{
			MethodName: "TakeOffGoodsOrder",
			Handler:    _MarketService_TakeOffGoodsOrder_Handler,
		},
		{
			MethodName: "AdminFreezeAccountTrade",
			Handler:    _MarketService_AdminFreezeAccountTrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_market.proto",
}
