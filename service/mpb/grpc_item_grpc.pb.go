// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: grpc_item.proto

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ItemService_GetItems_FullMethodName              = "/mpb.ItemService/GetItems"
	ItemService_GetEquips_FullMethodName             = "/mpb.ItemService/GetEquips"
	ItemService_BatchGetEquips_FullMethodName        = "/mpb.ItemService/BatchGetEquips"
	ItemService_UpgradeBaseEquipStar_FullMethodName  = "/mpb.ItemService/UpgradeBaseEquipStar"
	ItemService_UpgradeBaseEquipLevel_FullMethodName = "/mpb.ItemService/UpgradeBaseEquipLevel"
	ItemService_ExchangeItems_FullMethodName         = "/mpb.ItemService/ExchangeItems"
	ItemService_BatchAddItems_FullMethodName         = "/mpb.ItemService/BatchAddItems"
	ItemService_GetItemsRsc_FullMethodName           = "/mpb.ItemService/GetItemsRsc"
	ItemService_GetWallet_FullMethodName             = "/mpb.ItemService/GetWallet"
)

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemServiceClient interface {
	GetItems(ctx context.Context, in *ReqGetItems, opts ...grpc.CallOption) (*ResGetItems, error)
	GetEquips(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResGetEquips, error)
	BatchGetEquips(ctx context.Context, in *ReqUserIds, opts ...grpc.CallOption) (*ResBatchGetEquips, error)
	UpgradeBaseEquipStar(ctx context.Context, in *ReqUpgradeBaseEquipStar, opts ...grpc.CallOption) (*ResUpgradeBaseEquipStar, error)
	UpgradeBaseEquipLevel(ctx context.Context, in *ReqUpgradeBaseEquipLevel, opts ...grpc.CallOption) (*ResUpgradeBaseEquipLevel, error)
	ExchangeItems(ctx context.Context, in *ReqExchangeItems, opts ...grpc.CallOption) (*ResExchangeItems, error)
	BatchAddItems(ctx context.Context, in *ReqBatchAddItems, opts ...grpc.CallOption) (*ResBatchAddItems, error)
	GetItemsRsc(ctx context.Context, in *ReqGetItemsRsc, opts ...grpc.CallOption) (*ResGetItemsRsc, error)
	GetWallet(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResGetWallet, error)
}

type itemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemServiceClient(cc grpc.ClientConnInterface) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) GetItems(ctx context.Context, in *ReqGetItems, opts ...grpc.CallOption) (*ResGetItems, error) {
	out := new(ResGetItems)
	err := c.cc.Invoke(ctx, ItemService_GetItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetEquips(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResGetEquips, error) {
	out := new(ResGetEquips)
	err := c.cc.Invoke(ctx, ItemService_GetEquips_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) BatchGetEquips(ctx context.Context, in *ReqUserIds, opts ...grpc.CallOption) (*ResBatchGetEquips, error) {
	out := new(ResBatchGetEquips)
	err := c.cc.Invoke(ctx, ItemService_BatchGetEquips_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) UpgradeBaseEquipStar(ctx context.Context, in *ReqUpgradeBaseEquipStar, opts ...grpc.CallOption) (*ResUpgradeBaseEquipStar, error) {
	out := new(ResUpgradeBaseEquipStar)
	err := c.cc.Invoke(ctx, ItemService_UpgradeBaseEquipStar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) UpgradeBaseEquipLevel(ctx context.Context, in *ReqUpgradeBaseEquipLevel, opts ...grpc.CallOption) (*ResUpgradeBaseEquipLevel, error) {
	out := new(ResUpgradeBaseEquipLevel)
	err := c.cc.Invoke(ctx, ItemService_UpgradeBaseEquipLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ExchangeItems(ctx context.Context, in *ReqExchangeItems, opts ...grpc.CallOption) (*ResExchangeItems, error) {
	out := new(ResExchangeItems)
	err := c.cc.Invoke(ctx, ItemService_ExchangeItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) BatchAddItems(ctx context.Context, in *ReqBatchAddItems, opts ...grpc.CallOption) (*ResBatchAddItems, error) {
	out := new(ResBatchAddItems)
	err := c.cc.Invoke(ctx, ItemService_BatchAddItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItemsRsc(ctx context.Context, in *ReqGetItemsRsc, opts ...grpc.CallOption) (*ResGetItemsRsc, error) {
	out := new(ResGetItemsRsc)
	err := c.cc.Invoke(ctx, ItemService_GetItemsRsc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetWallet(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResGetWallet, error) {
	out := new(ResGetWallet)
	err := c.cc.Invoke(ctx, ItemService_GetWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServiceServer is the server API for ItemService service.
// All implementations must embed UnimplementedItemServiceServer
// for forward compatibility
type ItemServiceServer interface {
	GetItems(context.Context, *ReqGetItems) (*ResGetItems, error)
	GetEquips(context.Context, *ReqUserId) (*ResGetEquips, error)
	BatchGetEquips(context.Context, *ReqUserIds) (*ResBatchGetEquips, error)
	UpgradeBaseEquipStar(context.Context, *ReqUpgradeBaseEquipStar) (*ResUpgradeBaseEquipStar, error)
	UpgradeBaseEquipLevel(context.Context, *ReqUpgradeBaseEquipLevel) (*ResUpgradeBaseEquipLevel, error)
	ExchangeItems(context.Context, *ReqExchangeItems) (*ResExchangeItems, error)
	BatchAddItems(context.Context, *ReqBatchAddItems) (*ResBatchAddItems, error)
	GetItemsRsc(context.Context, *ReqGetItemsRsc) (*ResGetItemsRsc, error)
	GetWallet(context.Context, *ReqUserId) (*ResGetWallet, error)
	mustEmbedUnimplementedItemServiceServer()
}

// UnimplementedItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemServiceServer struct {
}

func (UnimplementedItemServiceServer) GetItems(context.Context, *ReqGetItems) (*ResGetItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedItemServiceServer) GetEquips(context.Context, *ReqUserId) (*ResGetEquips, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquips not implemented")
}
func (UnimplementedItemServiceServer) BatchGetEquips(context.Context, *ReqUserIds) (*ResBatchGetEquips, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetEquips not implemented")
}
func (UnimplementedItemServiceServer) UpgradeBaseEquipStar(context.Context, *ReqUpgradeBaseEquipStar) (*ResUpgradeBaseEquipStar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeBaseEquipStar not implemented")
}
func (UnimplementedItemServiceServer) UpgradeBaseEquipLevel(context.Context, *ReqUpgradeBaseEquipLevel) (*ResUpgradeBaseEquipLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeBaseEquipLevel not implemented")
}
func (UnimplementedItemServiceServer) ExchangeItems(context.Context, *ReqExchangeItems) (*ResExchangeItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeItems not implemented")
}
func (UnimplementedItemServiceServer) BatchAddItems(context.Context, *ReqBatchAddItems) (*ResBatchAddItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddItems not implemented")
}
func (UnimplementedItemServiceServer) GetItemsRsc(context.Context, *ReqGetItemsRsc) (*ResGetItemsRsc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsRsc not implemented")
}
func (UnimplementedItemServiceServer) GetWallet(context.Context, *ReqUserId) (*ResGetWallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (UnimplementedItemServiceServer) mustEmbedUnimplementedItemServiceServer() {}

// UnsafeItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServiceServer will
// result in compilation errors.
type UnsafeItemServiceServer interface {
	mustEmbedUnimplementedItemServiceServer()
}

func RegisterItemServiceServer(s grpc.ServiceRegistrar, srv ItemServiceServer) {
	s.RegisterService(&ItemService_ServiceDesc, srv)
}

func _ItemService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItems(ctx, req.(*ReqGetItems))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetEquips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetEquips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_GetEquips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetEquips(ctx, req.(*ReqUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_BatchGetEquips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).BatchGetEquips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_BatchGetEquips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).BatchGetEquips(ctx, req.(*ReqUserIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_UpgradeBaseEquipStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpgradeBaseEquipStar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).UpgradeBaseEquipStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_UpgradeBaseEquipStar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).UpgradeBaseEquipStar(ctx, req.(*ReqUpgradeBaseEquipStar))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_UpgradeBaseEquipLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpgradeBaseEquipLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).UpgradeBaseEquipLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_UpgradeBaseEquipLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).UpgradeBaseEquipLevel(ctx, req.(*ReqUpgradeBaseEquipLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ExchangeItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExchangeItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ExchangeItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ExchangeItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ExchangeItems(ctx, req.(*ReqExchangeItems))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_BatchAddItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBatchAddItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).BatchAddItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_BatchAddItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).BatchAddItems(ctx, req.(*ReqBatchAddItems))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItemsRsc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetItemsRsc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItemsRsc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_GetItemsRsc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItemsRsc(ctx, req.(*ReqGetItemsRsc))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_GetWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetWallet(ctx, req.(*ReqUserId))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemService_ServiceDesc is the grpc.ServiceDesc for ItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpb.ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItems",
			Handler:    _ItemService_GetItems_Handler,
		},
		{
			MethodName: "GetEquips",
			Handler:    _ItemService_GetEquips_Handler,
		},
		{
			MethodName: "BatchGetEquips",
			Handler:    _ItemService_BatchGetEquips_Handler,
		},
		{
			MethodName: "UpgradeBaseEquipStar",
			Handler:    _ItemService_UpgradeBaseEquipStar_Handler,
		},
		{
			MethodName: "UpgradeBaseEquipLevel",
			Handler:    _ItemService_UpgradeBaseEquipLevel_Handler,
		},
		{
			MethodName: "ExchangeItems",
			Handler:    _ItemService_ExchangeItems_Handler,
		},
		{
			MethodName: "BatchAddItems",
			Handler:    _ItemService_BatchAddItems_Handler,
		},
		{
			MethodName: "GetItemsRsc",
			Handler:    _ItemService_GetItemsRsc_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _ItemService_GetWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_item.proto",
}
